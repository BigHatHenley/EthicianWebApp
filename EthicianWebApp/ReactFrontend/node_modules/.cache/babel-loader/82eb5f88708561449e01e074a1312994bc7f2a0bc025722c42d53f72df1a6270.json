{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hat\\\\Documents\\\\Work Stuff\\\\EthicianWebApp\\\\ReactFrontend\\\\src\\\\components\\\\MultiChatXpertPage.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './MultiChatXpertPage.css';\nimport userImage from './images/personTyping.gif';\nimport aiImage from './images/AILooking.gif';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction MultiChatXpertPage() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [isTTSEnabled, setTTSEnabled] = useState(false);\n  const [isSpeechRecognitionOpen, setSpeechRecognitionOpen] = useState(false);\n  const [isLLMSelectionOpen, setLLMSelectionOpen] = useState(false);\n  const [isUpdateExpertsOpen, setUpdateExpertsOpen] = useState(false);\n  const [isExpertPopupOpen, setExpertPopupOpen] = useState(false);\n  const [experts, setExperts] = useState([\"Ethician\", \"Mechanical Engineer\", \"Metallurgist\", \"Safety Engineer\", \"Materials Engineer\", \"Robotics Engineer\", \"Electrical Engineer\", \"Civil Engineer\", \"Software Engineer\", \"Chemical Engineer\", \"Aerospace Engineer\", \"Petroleum Engineer\", \"Biomedical Engineer\", \"Environment Engineer\", \"Quality Engineer\"]);\n  const [selectedExperts, setSelectedExperts] = useState([]);\n  const [currentLLM, setCurrentLLM] = useState(null);\n  const [showEditPopup, setShowEditPopup] = useState(false); // Track if edit popup is open\n  const [currentExpertEdit, setCurrentExpertEdit] = useState(null); // Track current expert to edit\n  const [newExpertName, setNewExpertName] = useState(\"\"); // Track new expert name input\n\n  // const [expertToggles, setExpertToggles] = useState(Array(15).fill(false));\n  const [prompt, setPrompt] = useState(\"\");\n  const [isListening, setIsListening] = useState(false);\n  const [volume, setVolume] = useState(50); // Volume state\n\n  // Check if the browser supports speech recognition\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  const recognition = SpeechRecognition ? new SpeechRecognition() : null;\n  // const [transcript, setTranscript] = useState(\"\");\n  // const [error, setError] = useState(null);\n\n  const [conversationHistory, setConversationHistory] = useState([]);\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // Assume initially logged out\n\n  const [attachedFiles, setAttachedFiles] = useState([]); // <-- Define attachedFiles here\n\n  useEffect(() => {\n    const fetchConversations = async () => {\n      try {\n        const csrfToken = getCsrfToken(); // Retrieve CSRF token function\n        const response = await axios.get('https://199c-2601-702-0-9480-988c-b43-9c08-63d1.ngrok-free.app/api/get_conversations/', {\n          withCredentials: true,\n          headers: {\n            'X-CSRFToken': csrfToken\n          }\n        });\n        setConversationHistory(response.data);\n        setIsLoggedIn(true);\n      } catch (error) {\n        console.error('Error fetching conversation history:', error);\n        setIsLoggedIn(false);\n      }\n    };\n    fetchConversations();\n  }, []);\n  if (recognition) {\n    recognition.continuous = false;\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n    recognition.onresult = event => {\n      const transcript = event.results[0][0].transcript;\n      setPrompt(transcript); // Update the entry bar with the transcribed text\n      console.log(\"Transcribed Text:\", transcript); // Log transcription to browser console\n    };\n    recognition.onerror = event => {\n      console.error(\"Speech recognition error:\", event.error); // Error handling in console\n      setIsListening(false); // Reset listening state\n    };\n    recognition.onend = () => {\n      console.log(\"Speech recognition ended.\"); // Log end of recognition to browser console\n      setIsListening(false); // Ensure the recording state is reset\n    };\n  }\n\n  // Start listening for speech\n  const handleStartListening = () => {\n    if (recognition && !isListening) {\n      setPrompt(\"\"); // Clear any previous text in entry bar\n      setIsListening(true);\n      console.log(\"Starting Speech Recognition\"); // Log to browser console\n      recognition.start();\n    }\n  };\n\n  // Stop listening for speech\n  const handleStopListening = () => {\n    if (recognition && isListening) {\n      console.log(\"Stopping Speech Recognition\"); // Log to browser console\n      recognition.stop();\n      setIsListening(false); // Reset state so user can restart recording\n    }\n  };\n\n  // const handlePromptSubmit = () => {\n  //   const newMessage = { text: prompt, isUser: true };\n  //   setMessages([...messages, newMessage]);\n  //   handleSendMessage(prompt);\n  //   setPrompt(\"\");\n  // };\n\n  // const openPopup = (setting) => {\n  //   setTTSEnabled(false);\n  //   setSpeechRecognitionOpen(false);\n  //   setLLMSelectionOpen(false);\n  //   setUpdateExpertsOpen(false);\n\n  //   if (setting === \"TTS\") setTTSEnabled(true);\n  //   if (setting === \"SpeechRecognition\") setSpeechRecognitionOpen(true);\n  //   if (setting === \"LLMSelection\") setLLMSelectionOpen(true);\n  //   if (setting === \"UpdateExperts\") setUpdateExpertsOpen(true);\n  // };\n\n  // Function to toggle TTS setting\n  const toggleTTS = () => {\n    setTTSEnabled(!isTTSEnabled);\n    console.log(\"TTS Enabled:\", !isTTSEnabled); // Log for confirmation\n  };\n  const toggleExpertPopup = () => {\n    setExpertPopupOpen(!isExpertPopupOpen);\n  };\n\n  // const updateExpertName = (index, newName) => {\n  //   const updatedExperts = [...experts];\n  //   updatedExperts[index] = newName;\n  //   setExperts(updatedExperts);\n  // };\n\n  // Function to handle expert selection in the AI Image popup\n  const handleExpertSelection = expert => {\n    setSelectedExperts(prevExperts => {\n      const updatedExperts = prevExperts.includes(expert) ? prevExperts.filter(e => e !== expert) : [...prevExperts, expert];\n      console.log(\"Updated selectedExperts:\", updatedExperts); // Log after update\n      return updatedExperts;\n    });\n  };\n  const handleLLMSelection = llm => {\n    setCurrentLLM(llm);\n    console.log(\"Updated currentLLM:\", llm); // Log after update\n  };\n  const handleEditExpertClick = index => {\n    setCurrentExpertEdit(index);\n    setNewExpertName(experts[index]);\n    setShowEditPopup(true);\n  };\n  const handleSaveExpertName = () => {\n    const updatedExperts = [...experts];\n    updatedExperts[currentExpertEdit] = newExpertName;\n    setExperts(updatedExperts);\n    setShowEditPopup(false);\n  };\n  function getCsrfToken() {\n    const name = 'csrftoken';\n    const cookies = document.cookie.split(';');\n    for (let cookie of cookies) {\n      cookie = cookie.trim();\n      if (cookie.startsWith(name + '=')) {\n        return cookie.substring(name.length + 1);\n      }\n    }\n    return null;\n  }\n  const handleRestoreConversation = conversationText => {\n    // Assuming conversationText is newline-delimited for each message\n    const restoredMessages = conversationText.split('\\n').map((text, idx) => ({\n      text,\n      isUser: idx % 2 === 0 // Toggle between user and AI messages for simplicity\n    }));\n    setMessages(restoredMessages);\n  };\n  const handleSendMessage = async message => {\n    const formData = new FormData();\n    formData.append(\"text\", message);\n    formData.append(\"selected_experts\", JSON.stringify(selectedExperts));\n    formData.append(\"selected_option\", currentLLM);\n\n    // Only append files if there are any attached\n    console.log(\"Made it to file-check\");\n    if (attachedFiles.length > 0) {\n      attachedFiles.forEach((file, index) => {\n        formData.append(`file${index + 1}`, file);\n      });\n    }\n    try {\n      console.log(\"Made it to Pre-Transmission\");\n      const response = await axios.post('https://199c-2601-702-0-9480-988c-b43-9c08-63d1.ngrok-free.app/api/analyze_text/', formData, {\n        headers: {\n          'X-CSRFToken': getCsrfToken()\n          // Axios handles 'Content-Type' automatically\n        }\n        //withCredentials: true,\n      });\n\n      // Handle AI response as before\n      const aiText = response.data.output || \"No response from AI\";\n      const aiImages = response.data.images || [];\n\n      // Add the AI response text and images to the message state\n      const aiResponse = {\n        text: aiText,\n        isUser: false\n      };\n      setMessages(prevMessages => [...prevMessages, aiResponse]);\n      aiImages.forEach(imgUrl => {\n        const imageResponse = {\n          images: [{\n            url: imgUrl\n          }],\n          isUser: false\n        };\n        setMessages(prevMessages => [...prevMessages, imageResponse]);\n      });\n      if (isLoggedIn) {\n        const fullConversation = [...messages, {\n          text: message,\n          isUser: true\n        }, aiResponse].map(msg => {\n          var _msg$images;\n          return msg.text || ((_msg$images = msg.images) === null || _msg$images === void 0 ? void 0 : _msg$images[0].url) || \"\";\n        }).join('\\n');\n        await axios.post('https://199c-2601-702-0-9480-988c-b43-9c08-63d1.ngrok-free.app/api/save_conversation/', {\n          conversation_text: fullConversation\n        }, {\n          headers: {\n            'X-CSRFToken': getCsrfToken()\n          },\n          withCredentials: true\n        });\n      }\n      if (isTTSEnabled) {\n        speakText(aiText, volume / 100);\n      }\n    } catch (error) {\n      console.error('Error sending message to backend:', error);\n    }\n  };\n\n  // Ensure `speakText` uses the specified volume\n  const speakText = (text, volumeLevel = 0.5) => {\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.volume = volumeLevel; // Volume adjusted here\n      window.speechSynthesis.speak(utterance);\n    } else {\n      console.warn(\"TTS not supported in this browser\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"my-ui-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ai-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ai-image\",\n        onClick: toggleExpertPopup,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: aiImage,\n          alt: \"AI Expert\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this), isExpertPopupOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expert-popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Available Experts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expert-grid\",\n        children: experts.map((expert, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleExpertSelection(expert),\n          className: `expert-button ${selectedExperts.includes(expert) ? 'selected' : ''}`,\n          children: expert\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleExpertPopup,\n        className: \"close-popup-button\",\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"console-container\",\n      children: /*#__PURE__*/_jsxDEV(Console, {\n        experts: experts,\n        conversationHistory: conversationHistory,\n        handleRestoreConversation: handleRestoreConversation,\n        handleEditExpertClick: handleEditExpertClick,\n        volume: volume,\n        setVolume: setVolume,\n        handleStartListening: handleStartListening,\n        handleStopListening: handleStopListening,\n        isListening: isListening // Control the button label and behavior\n        ,\n        handleLLMSelection: handleLLMSelection // Pass handleLLMSelection to Console\n        ,\n        currentLLM: currentLLM,\n        toggleTTS: toggleTTS,\n        isTTSEnabled: isTTSEnabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"user-image\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: userImage,\n          alt: \"User Icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversation-container\",\n      children: /*#__PURE__*/_jsxDEV(ConversationWindow, {\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"entry-box-container\",\n      children: /*#__PURE__*/_jsxDEV(InputSection, {\n        attachedFiles: attachedFiles,\n        setAttachedFiles: setAttachedFiles,\n        prompt: prompt // Pass the transcribed prompt\n        ,\n        setPrompt: setPrompt,\n        onPromptSubmit: prompt => {\n          const newMessage = {\n            text: prompt,\n            isUser: true\n          };\n          setMessages([...messages, newMessage]);\n          handleSendMessage(prompt);\n        },\n        onFileUpload: file => console.log('File uploaded:', file.name),\n        onCopyConversation: () => navigator.clipboard.writeText(messages.map(m => m.text).join('\\n'))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this), showEditPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"edit-popup\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Edit Expert\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newExpertName,\n          onChange: e => setNewExpertName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSaveExpertName,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowEditPopup(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 5\n  }, this);\n}\n\n// Console Component\n_s(MultiChatXpertPage, \"IbJcVbF0f6PJRdCaE7ti+s/vs/Y=\");\n_c = MultiChatXpertPage;\nfunction Console({\n  experts,\n  handleEditExpertClick,\n  conversationHistory,\n  handleRestoreConversation,\n  volume,\n  setVolume,\n  handleStartListening,\n  handleStopListening,\n  isListening,\n  handleLLMSelection,\n  currentLLM,\n  toggleTTS,\n  isTTSEnabled\n}) {\n  _s2();\n  const [currentView, setCurrentView] = useState(\"default\");\n  const options = [\"Text-To-Speech\", \"Speech Recognition\", \"LLM Selection\", \"Update Experts\", \"Conversation Select\"];\n  const [currentOptionIndex, setCurrentOptionIndex] = useState(0);\n  const handleSelectOption = () => {\n    setCurrentView(options[currentOptionIndex]);\n  };\n  const handleBack = () => {\n    setCurrentView(\"default\");\n  };\n  const handleScroll = direction => {\n    if (direction === 'up') {\n      setCurrentOptionIndex(prev => prev === 0 ? options.length - 1 : prev - 1);\n    } else {\n      setCurrentOptionIndex(prev => prev === options.length - 1 ? 0 : prev + 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"console-container\",\n    children: currentView === \"default\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settings-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-display\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"console-option\",\n          children: options[currentOptionIndex]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleScroll('up'),\n          className: \"up-arrow\",\n          children: \"\\u25B2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSelectOption,\n          className: \"select-button\",\n          children: \"Select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleScroll('down'),\n          className: \"down-arrow\",\n          children: \"\\u25BC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"volume-slider-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"volume-label\",\n          children: \"Volume Level:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          className: \"volume-slider\",\n          min: \"0\",\n          max: \"100\",\n          value: volume,\n          onChange: e => setVolume(Number(e.target.value))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"volume-level\",\n          children: volume\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 5\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settings-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentView\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-page-content\",\n        children: [currentView === \"Text-To-Speech\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Enable or disable Text-to-Speech:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleTTS,\n            className: `tts-button ${isTTSEnabled ? 'tts-enabled' : 'tts-disabled'}`,\n            children: isTTSEnabled ? \"Disable TTS\" : \"Enable TTS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 426,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"volume-slider-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"volume-label\",\n              children: \"TTS Volume:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              className: \"volume-slider\",\n              min: \"0\",\n              max: \"100\",\n              value: volume,\n              onChange: e => setVolume(Number(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"volume-level\",\n              children: [\" \", volume]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), currentView === \"Speech Recognition\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Control Speech Recognition:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 446,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: isListening ? handleStopListening : handleStartListening,\n            children: isListening ? \"Stop Recording\" : \"Start Recording\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), currentView === \"LLM Selection\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Select Language Model:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"llm-dropdown\",\n            value: currentLLM || \"\",\n            onChange: e => handleLLMSelection(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select an LLM\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 460,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"ChatGPT\",\n              children: \"ChatGPT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Google Gemini\",\n              children: \"Google Gemini\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Anthropic Claude\",\n              children: \"Anthropic Claude\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 463,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), currentView === \"Update Experts\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"expert-grid\",\n          children: experts.map((expert, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"expert-button\",\n            onClick: () => handleEditExpertClick(index),\n            children: expert\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 470,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 15\n        }, this), currentView === \"Conversation Select\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Select a conversation to review:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"conversation-history\",\n            children: conversationHistory.length > 0 ? conversationHistory.map((conv, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"conversation-item\",\n              onClick: () => handleRestoreConversation(conv.conversation_text),\n              children: `${conv.user_id}'s Conversation ${new Date(conv.timestamp).toLocaleString()}`\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 23\n            }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No conversation history available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 491,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 479,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBack,\n        className: \"back-button\",\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 392,\n    columnNumber: 5\n  }, this);\n}\n\n// ConversationWindow Component\n_s2(Console, \"EDZiq2nsR6IzKF+HOEuRUdC3Kmg=\");\n_c2 = Console;\nfunction ConversationWindow({\n  messages\n}) {\n  _s3();\n  const conversationRef = useRef(null);\n  useEffect(() => {\n    if (conversationRef.current) {\n      conversationRef.current.scrollTop = conversationRef.current.scrollHeight;\n    }\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"conversation-window\",\n    ref: conversationRef,\n    children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `message-bubble ${message.isUser ? 'user-message' : 'ai-message'}`,\n      children: [message.text && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 28\n      }, this), message.images && message.images.map((img, imgIndex) => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: img.url,\n        alt: \"AI response\",\n        className: \"ai-image-response\",\n        style: {\n          maxWidth: '100%',\n          marginTop: '10px',\n          borderRadius: '8px'\n        }\n      }, imgIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 13\n      }, this))]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 515,\n    columnNumber: 5\n  }, this);\n}\n\n// TTS function\n// function speakText(text) {\n//   if ('speechSynthesis' in window) {\n//     const utterance = new SpeechSynthesisUtterance(text);\n//     utterance.rate = 1; // You can adjust rate, pitch, and volume here if needed\n//     window.speechSynthesis.speak(utterance);\n//   } else {\n//     console.warn(\"TTS not supported in this browser\");\n//   }\n// }\n\n// InputSection Component\n_s3(ConversationWindow, \"Y7nFwtZO/hlnq7te7GKq0r5Z7DM=\");\n_c3 = ConversationWindow;\nfunction InputSection({\n  prompt,\n  setPrompt,\n  onPromptSubmit,\n  onFileUpload,\n  onCopyConversation,\n  attachedFiles,\n  setAttachedFiles\n}) {\n  const handleInputChange = e => {\n    setPrompt(e.target.value);\n    e.target.style.height = \"auto\";\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n  const handleFileUpload = e => {\n    const files = Array.from(e.target.files);\n    if (attachedFiles.length + files.length > 5) {\n      alert(\"You can only attach up to 5 files at a time.\");\n      return;\n    }\n    const newFiles = files.map(file => {\n      if (file.type.startsWith(\"image/\")) {\n        // If the file is an image, read it as a data URL for preview\n        const reader = new FileReader();\n        reader.onload = e => {\n          file.preview = e.target.result; // Add preview data to the file object\n          setAttachedFiles(prev => [...prev]); // Trigger a re-render\n        };\n        reader.readAsDataURL(file);\n      }\n      return file;\n    });\n    setAttachedFiles(prev => [...prev, ...newFiles]);\n    files.forEach(file => onFileUpload(file)); // Trigger upload callback for each file\n  };\n  const handleRemoveFile = index => {\n    const updatedFiles = attachedFiles.filter((_, i) => i !== index);\n    setAttachedFiles(updatedFiles);\n  };\n  const handleBlur = e => {\n    if (prompt === \"\") {\n      e.target.style.height = \"20px\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"attached-files-container\",\n      children: attachedFiles.map((file, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"attached-file-popup\",\n        children: [file.preview ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: file.preview,\n          alt: file.name,\n          className: \"attached-file-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 596,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          children: file.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleRemoveFile(index),\n          className: \"remove-file-button\",\n          children: \"\\u2715\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 594,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: prompt,\n      onChange: e => setPrompt(e.target.value),\n      onBlur: handleBlur,\n      className: \"prompt-input\",\n      placeholder: \"Type your message here...\",\n      rows: 1,\n      style: {\n        height: \"20px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => onPromptSubmit(prompt),\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 614,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onCopyConversation,\n      children: \"Copy Conversation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => document.getElementById('file-upload').click(),\n      children: \"Upload File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      id: \"file-upload\",\n      style: {\n        display: 'none'\n      },\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 617,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 590,\n    columnNumber: 5\n  }, this);\n}\n_c4 = InputSection;\nexport default MultiChatXpertPage;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"MultiChatXpertPage\");\n$RefreshReg$(_c2, \"Console\");\n$RefreshReg$(_c3, \"ConversationWindow\");\n$RefreshReg$(_c4, \"InputSection\");","map":{"version":3,"names":["React","useState","useEffect","useRef","userImage","aiImage","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","MultiChatXpertPage","_s","messages","setMessages","isTTSEnabled","setTTSEnabled","isSpeechRecognitionOpen","setSpeechRecognitionOpen","isLLMSelectionOpen","setLLMSelectionOpen","isUpdateExpertsOpen","setUpdateExpertsOpen","isExpertPopupOpen","setExpertPopupOpen","experts","setExperts","selectedExperts","setSelectedExperts","currentLLM","setCurrentLLM","showEditPopup","setShowEditPopup","currentExpertEdit","setCurrentExpertEdit","newExpertName","setNewExpertName","prompt","setPrompt","isListening","setIsListening","volume","setVolume","SpeechRecognition","window","webkitSpeechRecognition","recognition","conversationHistory","setConversationHistory","isLoggedIn","setIsLoggedIn","attachedFiles","setAttachedFiles","fetchConversations","csrfToken","getCsrfToken","response","get","withCredentials","headers","data","error","console","continuous","interimResults","lang","onresult","event","transcript","results","log","onerror","onend","handleStartListening","start","handleStopListening","stop","toggleTTS","toggleExpertPopup","handleExpertSelection","expert","prevExperts","updatedExperts","includes","filter","e","handleLLMSelection","llm","handleEditExpertClick","index","handleSaveExpertName","name","cookies","document","cookie","split","trim","startsWith","substring","length","handleRestoreConversation","conversationText","restoredMessages","map","text","idx","isUser","handleSendMessage","message","formData","FormData","append","JSON","stringify","forEach","file","post","aiText","output","aiImages","images","aiResponse","prevMessages","imgUrl","imageResponse","url","fullConversation","msg","_msg$images","join","conversation_text","speakText","volumeLevel","utterance","SpeechSynthesisUtterance","speechSynthesis","speak","warn","className","children","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","Console","ConversationWindow","InputSection","onPromptSubmit","newMessage","onFileUpload","onCopyConversation","navigator","clipboard","writeText","m","type","value","onChange","target","_c","_s2","currentView","setCurrentView","options","currentOptionIndex","setCurrentOptionIndex","handleSelectOption","handleBack","handleScroll","direction","prev","min","max","Number","disabled","conv","user_id","Date","timestamp","toLocaleString","_c2","_s3","conversationRef","current","scrollTop","scrollHeight","ref","img","imgIndex","style","maxWidth","marginTop","borderRadius","_c3","handleInputChange","height","handleFileUpload","files","Array","from","alert","newFiles","reader","FileReader","onload","preview","result","readAsDataURL","handleRemoveFile","updatedFiles","_","i","handleBlur","onBlur","placeholder","rows","getElementById","click","id","display","_c4","$RefreshReg$"],"sources":["C:/Users/Hat/Documents/Work Stuff/EthicianWebApp/ReactFrontend/src/components/MultiChatXpertPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './MultiChatXpertPage.css';\r\nimport userImage from './images/personTyping.gif';\r\nimport aiImage from './images/AILooking.gif';\r\nimport axios from 'axios';\r\n\r\nfunction MultiChatXpertPage() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [isTTSEnabled, setTTSEnabled] = useState(false);\r\n  const [isSpeechRecognitionOpen, setSpeechRecognitionOpen] = useState(false);\r\n  const [isLLMSelectionOpen, setLLMSelectionOpen] = useState(false);\r\n  const [isUpdateExpertsOpen, setUpdateExpertsOpen] = useState(false);\r\n  const [isExpertPopupOpen, setExpertPopupOpen] = useState(false);\r\n  const [experts, setExperts] = useState([\r\n    \"Ethician\", \"Mechanical Engineer\", \"Metallurgist\", \"Safety Engineer\", \"Materials Engineer\",\r\n    \"Robotics Engineer\", \"Electrical Engineer\", \"Civil Engineer\", \"Software Engineer\", \"Chemical Engineer\",\r\n    \"Aerospace Engineer\", \"Petroleum Engineer\", \"Biomedical Engineer\", \"Environment Engineer\", \"Quality Engineer\"\r\n  ]);\r\n  const [selectedExperts, setSelectedExperts] = useState([]);\r\n  const [currentLLM, setCurrentLLM] = useState(null);\r\n  const [showEditPopup, setShowEditPopup] = useState(false); // Track if edit popup is open\r\n  const [currentExpertEdit, setCurrentExpertEdit] = useState(null); // Track current expert to edit\r\n  const [newExpertName, setNewExpertName] = useState(\"\"); // Track new expert name input\r\n  \r\n  // const [expertToggles, setExpertToggles] = useState(Array(15).fill(false));\r\n  const [prompt, setPrompt] = useState(\"\");\r\n  const [isListening, setIsListening] = useState(false);\r\n  const [volume, setVolume] = useState(50); // Volume state\r\n\r\n  // Check if the browser supports speech recognition\r\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n  const recognition = SpeechRecognition ? new SpeechRecognition() : null;\r\n  // const [transcript, setTranscript] = useState(\"\");\r\n  // const [error, setError] = useState(null);\r\n\r\n  const [conversationHistory, setConversationHistory] = useState([]);\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // Assume initially logged out\r\n\r\n  const [attachedFiles, setAttachedFiles] = useState([]);  // <-- Define attachedFiles here\r\n\r\n  useEffect(() => {\r\n    const fetchConversations = async () => {\r\n      try {\r\n        const csrfToken = getCsrfToken(); // Retrieve CSRF token function\r\n        const response = await axios.get('https://199c-2601-702-0-9480-988c-b43-9c08-63d1.ngrok-free.app/api/get_conversations/', {\r\n          withCredentials: true,\r\n          headers: {\r\n            'X-CSRFToken': csrfToken,\r\n          },\r\n        });\r\n        setConversationHistory(response.data);\r\n        setIsLoggedIn(true);\r\n      } catch (error) {\r\n        console.error('Error fetching conversation history:', error);\r\n        setIsLoggedIn(false);\r\n      }\r\n    };\r\n  \r\n    fetchConversations();\r\n  }, []);\r\n\r\n\r\n  if (recognition) {\r\n    recognition.continuous = false;\r\n    recognition.interimResults = false;\r\n    recognition.lang = 'en-US';\r\n\r\n    recognition.onresult = (event) => {\r\n      const transcript = event.results[0][0].transcript;\r\n      setPrompt(transcript);  // Update the entry bar with the transcribed text\r\n      console.log(\"Transcribed Text:\", transcript);  // Log transcription to browser console\r\n    };\r\n\r\n    recognition.onerror = (event) => {\r\n      console.error(\"Speech recognition error:\", event.error);  // Error handling in console\r\n      setIsListening(false);  // Reset listening state\r\n    };\r\n\r\n    recognition.onend = () => {\r\n      console.log(\"Speech recognition ended.\");  // Log end of recognition to browser console\r\n      setIsListening(false);  // Ensure the recording state is reset\r\n    };\r\n  }\r\n\r\n  // Start listening for speech\r\n  const handleStartListening = () => {\r\n    if (recognition && !isListening) {\r\n      setPrompt(\"\");  // Clear any previous text in entry bar\r\n      setIsListening(true);\r\n      console.log(\"Starting Speech Recognition\");  // Log to browser console\r\n      recognition.start();\r\n    }\r\n  };\r\n\r\n  // Stop listening for speech\r\n  const handleStopListening = () => {\r\n    if (recognition && isListening) {\r\n      console.log(\"Stopping Speech Recognition\");  // Log to browser console\r\n      recognition.stop();\r\n      setIsListening(false);  // Reset state so user can restart recording\r\n    }\r\n  };\r\n\r\n  // const handlePromptSubmit = () => {\r\n  //   const newMessage = { text: prompt, isUser: true };\r\n  //   setMessages([...messages, newMessage]);\r\n  //   handleSendMessage(prompt);\r\n  //   setPrompt(\"\");\r\n  // };\r\n\r\n  // const openPopup = (setting) => {\r\n  //   setTTSEnabled(false);\r\n  //   setSpeechRecognitionOpen(false);\r\n  //   setLLMSelectionOpen(false);\r\n  //   setUpdateExpertsOpen(false);\r\n\r\n  //   if (setting === \"TTS\") setTTSEnabled(true);\r\n  //   if (setting === \"SpeechRecognition\") setSpeechRecognitionOpen(true);\r\n  //   if (setting === \"LLMSelection\") setLLMSelectionOpen(true);\r\n  //   if (setting === \"UpdateExperts\") setUpdateExpertsOpen(true);\r\n  // };\r\n\r\n  // Function to toggle TTS setting\r\n  const toggleTTS = () => {\r\n    setTTSEnabled(!isTTSEnabled);\r\n    console.log(\"TTS Enabled:\", !isTTSEnabled); // Log for confirmation\r\n  };\r\n\r\n  const toggleExpertPopup = () => {\r\n    setExpertPopupOpen(!isExpertPopupOpen);\r\n  };\r\n\r\n  // const updateExpertName = (index, newName) => {\r\n  //   const updatedExperts = [...experts];\r\n  //   updatedExperts[index] = newName;\r\n  //   setExperts(updatedExperts);\r\n  // };\r\n\r\n  // Function to handle expert selection in the AI Image popup\r\n  const handleExpertSelection = (expert) => {\r\n    setSelectedExperts((prevExperts) => {\r\n        const updatedExperts = prevExperts.includes(expert)\r\n            ? prevExperts.filter((e) => e !== expert)\r\n            : [...prevExperts, expert];\r\n        console.log(\"Updated selectedExperts:\", updatedExperts);  // Log after update\r\n        return updatedExperts;\r\n    });\r\n  };\r\n\r\n  const handleLLMSelection = (llm) => {\r\n    setCurrentLLM(llm);\r\n    console.log(\"Updated currentLLM:\", llm);  // Log after update\r\n  };\r\n\r\n  const handleEditExpertClick = (index) => {\r\n    setCurrentExpertEdit(index);\r\n    setNewExpertName(experts[index]);\r\n    setShowEditPopup(true);\r\n  };\r\n  \r\n  const handleSaveExpertName = () => {\r\n    const updatedExperts = [...experts];\r\n    updatedExperts[currentExpertEdit] = newExpertName;\r\n    setExperts(updatedExperts);\r\n    setShowEditPopup(false);\r\n  };\r\n\r\n  function getCsrfToken() {\r\n    const name = 'csrftoken';\r\n    const cookies = document.cookie.split(';');\r\n    for (let cookie of cookies) {\r\n      cookie = cookie.trim();\r\n      if (cookie.startsWith(name + '=')) {\r\n        return cookie.substring(name.length + 1);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  const handleRestoreConversation = (conversationText) => {\r\n    // Assuming conversationText is newline-delimited for each message\r\n    const restoredMessages = conversationText.split('\\n').map((text, idx) => ({\r\n      text,\r\n      isUser: idx % 2 === 0, // Toggle between user and AI messages for simplicity\r\n    }));\r\n    setMessages(restoredMessages);\r\n  };\r\n  \r\n\r\n  const handleSendMessage = async (message) => {\r\n    const formData = new FormData();\r\n    formData.append(\"text\", message);\r\n    formData.append(\"selected_experts\", JSON.stringify(selectedExperts));\r\n    formData.append(\"selected_option\", currentLLM);\r\n  \r\n    // Only append files if there are any attached\r\n    console.log(\"Made it to file-check\")\r\n    if (attachedFiles.length > 0) {\r\n      attachedFiles.forEach((file, index) => {\r\n        formData.append(`file${index + 1}`, file);\r\n      });\r\n    }\r\n  \r\n    try {\r\n      console.log(\"Made it to Pre-Transmission\")\r\n      const response = await axios.post(\r\n        'https://199c-2601-702-0-9480-988c-b43-9c08-63d1.ngrok-free.app/api/analyze_text/',\r\n        formData,\r\n        {\r\n          headers: {\r\n            'X-CSRFToken': getCsrfToken(),\r\n            // Axios handles 'Content-Type' automatically\r\n          },\r\n          //withCredentials: true,\r\n        }\r\n      );\r\n  \r\n      // Handle AI response as before\r\n      const aiText = response.data.output || \"No response from AI\";\r\n      const aiImages = response.data.images || [];\r\n  \r\n      // Add the AI response text and images to the message state\r\n      const aiResponse = { text: aiText, isUser: false };\r\n      setMessages((prevMessages) => [...prevMessages, aiResponse]);\r\n  \r\n      aiImages.forEach((imgUrl) => {\r\n        const imageResponse = { images: [{ url: imgUrl }], isUser: false };\r\n        setMessages((prevMessages) => [...prevMessages, imageResponse]);\r\n      });\r\n  \r\n      if (isLoggedIn) {\r\n        const fullConversation = [...messages, { text: message, isUser: true }, aiResponse]\r\n          .map(msg => msg.text || msg.images?.[0].url || \"\")\r\n          .join('\\n');\r\n  \r\n        await axios.post(\r\n          'https://199c-2601-702-0-9480-988c-b43-9c08-63d1.ngrok-free.app/api/save_conversation/',\r\n          { conversation_text: fullConversation },\r\n          {\r\n            headers: { 'X-CSRFToken': getCsrfToken() },\r\n            withCredentials: true,\r\n          }\r\n        );\r\n      }\r\n  \r\n      if (isTTSEnabled) {\r\n        speakText(aiText, volume / 100);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending message to backend:', error);\r\n    }\r\n  };\r\n\r\n  // Ensure `speakText` uses the specified volume\r\n  const speakText = (text, volumeLevel = 0.5) => {\r\n    if ('speechSynthesis' in window) {\r\n      const utterance = new SpeechSynthesisUtterance(text);\r\n      utterance.volume = volumeLevel;  // Volume adjusted here\r\n      window.speechSynthesis.speak(utterance);\r\n    } else {\r\n      console.warn(\"TTS not supported in this browser\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"my-ui-container\">\r\n      <div className=\"ai-container\">\r\n        <button className=\"ai-image\" onClick={toggleExpertPopup}>\r\n          <img src={aiImage} alt=\"AI Expert\" />\r\n        </button>\r\n      </div>\r\n\r\n      {/* AI Expert Popup with Toggle Indicator */}\r\n      {isExpertPopupOpen && (\r\n        <div className=\"expert-popup\">\r\n          <h4>Available Experts</h4>\r\n          <div className=\"expert-grid\">\r\n            {experts.map((expert, index) => (\r\n              <button\r\n                key={index}\r\n                onClick={() => handleExpertSelection(expert)}\r\n                className={`expert-button ${selectedExperts.includes(expert) ? 'selected' : ''}`}\r\n              >\r\n                {expert}\r\n              </button>\r\n            ))}\r\n          </div>\r\n          <button onClick={toggleExpertPopup} className=\"close-popup-button\">Close</button>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"console-container\">\r\n      <Console\r\n        experts={experts}\r\n        conversationHistory={conversationHistory}\r\n        handleRestoreConversation={handleRestoreConversation}\r\n        handleEditExpertClick={handleEditExpertClick}\r\n        volume={volume}\r\n        setVolume={setVolume}\r\n        handleStartListening={handleStartListening}\r\n        handleStopListening={handleStopListening}\r\n        isListening={isListening} // Control the button label and behavior\r\n        handleLLMSelection={handleLLMSelection}  // Pass handleLLMSelection to Console\r\n        currentLLM={currentLLM}\r\n        toggleTTS={toggleTTS}\r\n        isTTSEnabled={isTTSEnabled}\r\n      />\r\n      </div>\r\n\r\n      <div className=\"user-container\">\r\n        <button className=\"user-image\">\r\n          <img src={userImage} alt=\"User Icon\" />\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"conversation-container\">\r\n        <ConversationWindow messages={messages} />\r\n      </div>\r\n\r\n      <div className=\"entry-box-container\">\r\n        <InputSection\r\n          attachedFiles={attachedFiles}\r\n          setAttachedFiles={setAttachedFiles}\r\n          prompt={prompt} // Pass the transcribed prompt\r\n          setPrompt={setPrompt}\r\n          onPromptSubmit={(prompt) => {\r\n            const newMessage = { text: prompt, isUser: true };\r\n            setMessages([...messages, newMessage]);\r\n            handleSendMessage(prompt);\r\n          }}\r\n          onFileUpload={(file) => console.log('File uploaded:', file.name)}\r\n          onCopyConversation={() => navigator.clipboard.writeText(messages.map(m => m.text).join('\\n'))}\r\n        />\r\n      </div>\r\n\r\n      {/* Expert Edit Popup */}\r\n      {showEditPopup && (\r\n        <div className=\"overlay\">\r\n          <div className=\"edit-popup\">\r\n            <h4>Edit Expert</h4>\r\n            <input\r\n              type=\"text\"\r\n              value={newExpertName}\r\n              onChange={(e) => setNewExpertName(e.target.value)}\r\n            />\r\n            <button onClick={handleSaveExpertName}>Save</button>\r\n            <button onClick={() => setShowEditPopup(false)}>Cancel</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Console Component\r\nfunction Console({ \r\n  experts, \r\n  handleEditExpertClick,\r\n  conversationHistory,\r\n  handleRestoreConversation, \r\n  volume, \r\n  setVolume, \r\n  handleStartListening, \r\n  handleStopListening,\r\n  isListening ,\r\n  handleLLMSelection,\r\n  currentLLM,\r\n  toggleTTS,\r\n  isTTSEnabled\r\n}) {\r\n  const [currentView, setCurrentView] = useState(\"default\");\r\n  const options = [\"Text-To-Speech\", \"Speech Recognition\", \"LLM Selection\", \"Update Experts\", \"Conversation Select\"];\r\n  const [currentOptionIndex, setCurrentOptionIndex] = useState(0);\r\n\r\n  const handleSelectOption = () => {\r\n    setCurrentView(options[currentOptionIndex]);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setCurrentView(\"default\");\r\n  };\r\n\r\n  const handleScroll = (direction) => {\r\n    if (direction === 'up') {\r\n      setCurrentOptionIndex((prev) => (prev === 0 ? options.length - 1 : prev - 1));\r\n    } else {\r\n      setCurrentOptionIndex((prev) => (prev === options.length - 1 ? 0 : prev + 1));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"console-container\">\r\n  {currentView === \"default\" ? (\r\n    <div className=\"settings-grid\">\r\n      <div className=\"settings-display\">\r\n        <div className=\"console-option\">\r\n          {options[currentOptionIndex]}\r\n        </div>\r\n      </div>\r\n      <div className=\"settings-buttons\">\r\n        <button onClick={() => handleScroll('up')} className=\"up-arrow\">▲</button>\r\n        <button onClick={handleSelectOption} className=\"select-button\">Select</button>\r\n        <button onClick={() => handleScroll('down')} className=\"down-arrow\">▼</button>\r\n      </div>\r\n      {/* Volume Slider */}\r\n      <div className=\"volume-slider-container\">\r\n        <span className=\"volume-label\">Volume Level:</span>\r\n        <input\r\n          type=\"range\"\r\n          className=\"volume-slider\"\r\n          min=\"0\"\r\n          max=\"100\"\r\n          value={volume}\r\n          onChange={(e) => setVolume(Number(e.target.value))}\r\n        />\r\n        <span className=\"volume-level\">{volume}</span>\r\n      </div>\r\n    </div>\r\n      ) : (\r\n        <div className=\"settings-content\">\r\n          <h3>{currentView}</h3>\r\n          <div className=\"settings-page-content\">\r\n            {currentView === \"Text-To-Speech\" && (\r\n              <>\r\n                <p>Enable or disable Text-to-Speech:</p>\r\n                <button onClick={toggleTTS} className={`tts-button ${isTTSEnabled ? 'tts-enabled' : 'tts-disabled'}`}>\r\n                  {isTTSEnabled ? \"Disable TTS\" : \"Enable TTS\"}\r\n                </button>\r\n                {/* Volume Slider for Text-To-Speech */}\r\n                <div className=\"volume-slider-container\">\r\n                  <span className=\"volume-label\">TTS Volume:</span>\r\n                  <input\r\n                    type=\"range\"\r\n                    className=\"volume-slider\"\r\n                    min=\"0\"\r\n                    max=\"100\"\r\n                    value={volume}\r\n                    onChange={(e) => setVolume(Number(e.target.value))}\r\n                  />\r\n                  <span className=\"volume-level\"> {volume}</span>\r\n                </div>\r\n              </>\r\n            )}\r\n            {currentView === \"Speech Recognition\" && (\r\n              <>\r\n                <p>Control Speech Recognition:</p>\r\n                <button onClick={isListening ? handleStopListening : handleStartListening}>\r\n                  {isListening ? \"Stop Recording\" : \"Start Recording\"}\r\n                </button>\r\n              </>\r\n            )}\r\n            {currentView === \"LLM Selection\" && (\r\n              <>\r\n                <p>Select Language Model:</p>\r\n                <select\r\n                  className=\"llm-dropdown\"\r\n                  value={currentLLM || \"\"}\r\n                  onChange={(e) => handleLLMSelection(e.target.value)}\r\n                >\r\n                  <option value=\"\" disabled>Select an LLM</option>\r\n                  <option value=\"ChatGPT\">ChatGPT</option>\r\n                  <option value=\"Google Gemini\">Google Gemini</option>\r\n                  <option value=\"Anthropic Claude\">Anthropic Claude</option>\r\n                </select>\r\n              </>\r\n            )}\r\n            {currentView === \"Update Experts\" && (\r\n              <div className=\"expert-grid\">\r\n                {experts.map((expert, index) => (\r\n                  <button key={index} className=\"expert-button\" onClick={() => handleEditExpertClick(index)}>\r\n                    {expert}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            )}\r\n            {currentView === \"Conversation Select\" && (\r\n              <>\r\n                <p>Select a conversation to review:</p>\r\n                <div className=\"conversation-history\">\r\n                  {conversationHistory.length > 0 ? (\r\n                    conversationHistory.map((conv, index) => (\r\n                      <div\r\n                        key={index}\r\n                        className=\"conversation-item\"\r\n                        onClick={() => handleRestoreConversation(conv.conversation_text)}\r\n                      >\r\n                        {`${conv.user_id}'s Conversation ${new Date(conv.timestamp).toLocaleString()}`}\r\n                      </div>\r\n                    ))\r\n                  ) : (\r\n                    <p>No conversation history available.</p>\r\n                  )}\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n          <button onClick={handleBack} className=\"back-button\">Back</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// ConversationWindow Component\r\nfunction ConversationWindow({ messages }) {\r\n  const conversationRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (conversationRef.current) {\r\n      conversationRef.current.scrollTop = conversationRef.current.scrollHeight;\r\n    }\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div className=\"conversation-window\" ref={conversationRef}>\r\n      {messages.map((message, index) => (\r\n        <div key={index} className={`message-bubble ${message.isUser ? 'user-message' : 'ai-message'}`}>\r\n          {message.text && <p>{message.text}</p>}\r\n          {message.images && message.images.map((img, imgIndex) => (\r\n            <img\r\n              key={imgIndex}\r\n              src={img.url}\r\n              alt=\"AI response\"\r\n              className=\"ai-image-response\"\r\n              style={{ maxWidth: '100%', marginTop: '10px', borderRadius: '8px' }}\r\n            />\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n// TTS function\r\n// function speakText(text) {\r\n//   if ('speechSynthesis' in window) {\r\n//     const utterance = new SpeechSynthesisUtterance(text);\r\n//     utterance.rate = 1; // You can adjust rate, pitch, and volume here if needed\r\n//     window.speechSynthesis.speak(utterance);\r\n//   } else {\r\n//     console.warn(\"TTS not supported in this browser\");\r\n//   }\r\n// }\r\n\r\n// InputSection Component\r\nfunction InputSection({ prompt, setPrompt, onPromptSubmit, onFileUpload, onCopyConversation, attachedFiles, setAttachedFiles }) {\r\n\r\n  const handleInputChange = (e) => {\r\n    setPrompt(e.target.value);\r\n    e.target.style.height = \"auto\";\r\n    e.target.style.height = `${e.target.scrollHeight}px`;\r\n  };\r\n\r\n  const handleFileUpload = (e) => {\r\n    const files = Array.from(e.target.files);\r\n    if (attachedFiles.length + files.length > 5) {\r\n      alert(\"You can only attach up to 5 files at a time.\");\r\n      return;\r\n    }\r\n\r\n    const newFiles = files.map((file) => {\r\n      if (file.type.startsWith(\"image/\")) {\r\n        // If the file is an image, read it as a data URL for preview\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n          file.preview = e.target.result; // Add preview data to the file object\r\n          setAttachedFiles((prev) => [...prev]); // Trigger a re-render\r\n        };\r\n        reader.readAsDataURL(file);\r\n      }\r\n      return file;\r\n    });\r\n\r\n    setAttachedFiles((prev) => [...prev, ...newFiles]);\r\n    files.forEach((file) => onFileUpload(file)); // Trigger upload callback for each file\r\n  };\r\n\r\n  const handleRemoveFile = (index) => {\r\n    const updatedFiles = attachedFiles.filter((_, i) => i !== index);\r\n    setAttachedFiles(updatedFiles);\r\n  };\r\n\r\n  const handleBlur = (e) => {\r\n    if (prompt === \"\") {\r\n      e.target.style.height = \"20px\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"input-section\">\r\n      {/* Display file popups above the entry bar */}\r\n      <div className=\"attached-files-container\">\r\n        {attachedFiles.map((file, index) => (\r\n          <div key={index} className=\"attached-file-popup\">\r\n            {file.preview ? (\r\n              <img src={file.preview} alt={file.name} className=\"attached-file-image\" />\r\n            ) : (\r\n              <span>{file.name}</span>\r\n            )}\r\n            <button onClick={() => handleRemoveFile(index)} className=\"remove-file-button\">✕</button>\r\n          </div>\r\n        ))}\r\n      </div>\r\n      \r\n      <textarea\r\n        value={prompt}\r\n        onChange={(e) => setPrompt(e.target.value)}\r\n        onBlur={handleBlur}\r\n        className=\"prompt-input\"\r\n        placeholder=\"Type your message here...\"\r\n        rows={1}\r\n        style={{ height: \"20px\" }}\r\n      />\r\n      <button onClick={() => onPromptSubmit(prompt)}>Submit</button>\r\n      <button onClick={onCopyConversation}>Copy Conversation</button>\r\n      <button onClick={() => document.getElementById('file-upload').click()}>Upload File</button>\r\n      <input type=\"file\" id=\"file-upload\" style={{ display: 'none' }} onChange={handleFileUpload} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MultiChatXpertPage;\r\n"],"mappings":";;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,0BAA0B;AACjC,OAAOC,SAAS,MAAM,2BAA2B;AACjD,OAAOC,OAAO,MAAM,wBAAwB;AAC5C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE1B,SAASC,kBAAkBA,CAAA,EAAG;EAAAC,EAAA;EAC5B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACc,YAAY,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACgB,uBAAuB,EAAEC,wBAAwB,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC3E,MAAM,CAACkB,kBAAkB,EAAEC,mBAAmB,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAM,CAACoB,mBAAmB,EAAEC,oBAAoB,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAACsB,iBAAiB,EAAEC,kBAAkB,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAM,CAACwB,OAAO,EAAEC,UAAU,CAAC,GAAGzB,QAAQ,CAAC,CACrC,UAAU,EAAE,qBAAqB,EAAE,cAAc,EAAE,iBAAiB,EAAE,oBAAoB,EAC1F,mBAAmB,EAAE,qBAAqB,EAAE,gBAAgB,EAAE,mBAAmB,EAAE,mBAAmB,EACtG,oBAAoB,EAAE,oBAAoB,EAAE,qBAAqB,EAAE,sBAAsB,EAAE,kBAAkB,CAC9G,CAAC;EACF,MAAM,CAAC0B,eAAe,EAAEC,kBAAkB,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAAC4B,UAAU,EAAEC,aAAa,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAAC8B,aAAa,EAAEC,gBAAgB,CAAC,GAAG/B,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EAC3D,MAAM,CAACgC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAClE,MAAM,CAACkC,aAAa,EAAEC,gBAAgB,CAAC,GAAGnC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAExD;EACA,MAAM,CAACoC,MAAM,EAAEC,SAAS,CAAC,GAAGrC,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACsC,WAAW,EAAEC,cAAc,CAAC,GAAGvC,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACwC,MAAM,EAAEC,SAAS,CAAC,GAAGzC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE1C;EACA,MAAM0C,iBAAiB,GAAGC,MAAM,CAACD,iBAAiB,IAAIC,MAAM,CAACC,uBAAuB;EACpF,MAAMC,WAAW,GAAGH,iBAAiB,GAAG,IAAIA,iBAAiB,CAAC,CAAC,GAAG,IAAI;EACtE;EACA;;EAEA,MAAM,CAACI,mBAAmB,EAAEC,sBAAsB,CAAC,GAAG/C,QAAQ,CAAC,EAAE,CAAC;EAClE,MAAM,CAACgD,UAAU,EAAEC,aAAa,CAAC,GAAGjD,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAErD,MAAM,CAACkD,aAAa,EAAEC,gBAAgB,CAAC,GAAGnD,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAE;;EAEzDC,SAAS,CAAC,MAAM;IACd,MAAMmD,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,IAAI;QACF,MAAMC,SAAS,GAAGC,YAAY,CAAC,CAAC,CAAC,CAAC;QAClC,MAAMC,QAAQ,GAAG,MAAMlD,KAAK,CAACmD,GAAG,CAAC,uFAAuF,EAAE;UACxHC,eAAe,EAAE,IAAI;UACrBC,OAAO,EAAE;YACP,aAAa,EAAEL;UACjB;QACF,CAAC,CAAC;QACFN,sBAAsB,CAACQ,QAAQ,CAACI,IAAI,CAAC;QACrCV,aAAa,CAAC,IAAI,CAAC;MACrB,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;QAC5DX,aAAa,CAAC,KAAK,CAAC;MACtB;IACF,CAAC;IAEDG,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAGN,IAAIP,WAAW,EAAE;IACfA,WAAW,CAACiB,UAAU,GAAG,KAAK;IAC9BjB,WAAW,CAACkB,cAAc,GAAG,KAAK;IAClClB,WAAW,CAACmB,IAAI,GAAG,OAAO;IAE1BnB,WAAW,CAACoB,QAAQ,GAAIC,KAAK,IAAK;MAChC,MAAMC,UAAU,GAAGD,KAAK,CAACE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACD,UAAU;MACjD9B,SAAS,CAAC8B,UAAU,CAAC,CAAC,CAAE;MACxBN,OAAO,CAACQ,GAAG,CAAC,mBAAmB,EAAEF,UAAU,CAAC,CAAC,CAAE;IACjD,CAAC;IAEDtB,WAAW,CAACyB,OAAO,GAAIJ,KAAK,IAAK;MAC/BL,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEM,KAAK,CAACN,KAAK,CAAC,CAAC,CAAE;MAC1DrB,cAAc,CAAC,KAAK,CAAC,CAAC,CAAE;IAC1B,CAAC;IAEDM,WAAW,CAAC0B,KAAK,GAAG,MAAM;MACxBV,OAAO,CAACQ,GAAG,CAAC,2BAA2B,CAAC,CAAC,CAAE;MAC3C9B,cAAc,CAAC,KAAK,CAAC,CAAC,CAAE;IAC1B,CAAC;EACH;;EAEA;EACA,MAAMiC,oBAAoB,GAAGA,CAAA,KAAM;IACjC,IAAI3B,WAAW,IAAI,CAACP,WAAW,EAAE;MAC/BD,SAAS,CAAC,EAAE,CAAC,CAAC,CAAE;MAChBE,cAAc,CAAC,IAAI,CAAC;MACpBsB,OAAO,CAACQ,GAAG,CAAC,6BAA6B,CAAC,CAAC,CAAE;MAC7CxB,WAAW,CAAC4B,KAAK,CAAC,CAAC;IACrB;EACF,CAAC;;EAED;EACA,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;IAChC,IAAI7B,WAAW,IAAIP,WAAW,EAAE;MAC9BuB,OAAO,CAACQ,GAAG,CAAC,6BAA6B,CAAC,CAAC,CAAE;MAC7CxB,WAAW,CAAC8B,IAAI,CAAC,CAAC;MAClBpC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAE;IAC1B;EACF,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA,MAAMqC,SAAS,GAAGA,CAAA,KAAM;IACtB7D,aAAa,CAAC,CAACD,YAAY,CAAC;IAC5B+C,OAAO,CAACQ,GAAG,CAAC,cAAc,EAAE,CAACvD,YAAY,CAAC,CAAC,CAAC;EAC9C,CAAC;EAED,MAAM+D,iBAAiB,GAAGA,CAAA,KAAM;IAC9BtD,kBAAkB,CAAC,CAACD,iBAAiB,CAAC;EACxC,CAAC;;EAED;EACA;EACA;EACA;EACA;;EAEA;EACA,MAAMwD,qBAAqB,GAAIC,MAAM,IAAK;IACxCpD,kBAAkB,CAAEqD,WAAW,IAAK;MAChC,MAAMC,cAAc,GAAGD,WAAW,CAACE,QAAQ,CAACH,MAAM,CAAC,GAC7CC,WAAW,CAACG,MAAM,CAAEC,CAAC,IAAKA,CAAC,KAAKL,MAAM,CAAC,GACvC,CAAC,GAAGC,WAAW,EAAED,MAAM,CAAC;MAC9BlB,OAAO,CAACQ,GAAG,CAAC,0BAA0B,EAAEY,cAAc,CAAC,CAAC,CAAE;MAC1D,OAAOA,cAAc;IACzB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMI,kBAAkB,GAAIC,GAAG,IAAK;IAClCzD,aAAa,CAACyD,GAAG,CAAC;IAClBzB,OAAO,CAACQ,GAAG,CAAC,qBAAqB,EAAEiB,GAAG,CAAC,CAAC,CAAE;EAC5C,CAAC;EAED,MAAMC,qBAAqB,GAAIC,KAAK,IAAK;IACvCvD,oBAAoB,CAACuD,KAAK,CAAC;IAC3BrD,gBAAgB,CAACX,OAAO,CAACgE,KAAK,CAAC,CAAC;IAChCzD,gBAAgB,CAAC,IAAI,CAAC;EACxB,CAAC;EAED,MAAM0D,oBAAoB,GAAGA,CAAA,KAAM;IACjC,MAAMR,cAAc,GAAG,CAAC,GAAGzD,OAAO,CAAC;IACnCyD,cAAc,CAACjD,iBAAiB,CAAC,GAAGE,aAAa;IACjDT,UAAU,CAACwD,cAAc,CAAC;IAC1BlD,gBAAgB,CAAC,KAAK,CAAC;EACzB,CAAC;EAED,SAASuB,YAAYA,CAAA,EAAG;IACtB,MAAMoC,IAAI,GAAG,WAAW;IACxB,MAAMC,OAAO,GAAGC,QAAQ,CAACC,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC;IAC1C,KAAK,IAAID,MAAM,IAAIF,OAAO,EAAE;MAC1BE,MAAM,GAAGA,MAAM,CAACE,IAAI,CAAC,CAAC;MACtB,IAAIF,MAAM,CAACG,UAAU,CAACN,IAAI,GAAG,GAAG,CAAC,EAAE;QACjC,OAAOG,MAAM,CAACI,SAAS,CAACP,IAAI,CAACQ,MAAM,GAAG,CAAC,CAAC;MAC1C;IACF;IACA,OAAO,IAAI;EACb;EAEA,MAAMC,yBAAyB,GAAIC,gBAAgB,IAAK;IACtD;IACA,MAAMC,gBAAgB,GAAGD,gBAAgB,CAACN,KAAK,CAAC,IAAI,CAAC,CAACQ,GAAG,CAAC,CAACC,IAAI,EAAEC,GAAG,MAAM;MACxED,IAAI;MACJE,MAAM,EAAED,GAAG,GAAG,CAAC,KAAK,CAAC,CAAE;IACzB,CAAC,CAAC,CAAC;IACH3F,WAAW,CAACwF,gBAAgB,CAAC;EAC/B,CAAC;EAGD,MAAMK,iBAAiB,GAAG,MAAOC,OAAO,IAAK;IAC3C,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,OAAO,CAAC;IAChCC,QAAQ,CAACE,MAAM,CAAC,kBAAkB,EAAEC,IAAI,CAACC,SAAS,CAACtF,eAAe,CAAC,CAAC;IACpEkF,QAAQ,CAACE,MAAM,CAAC,iBAAiB,EAAElF,UAAU,CAAC;;IAE9C;IACAiC,OAAO,CAACQ,GAAG,CAAC,uBAAuB,CAAC;IACpC,IAAInB,aAAa,CAACgD,MAAM,GAAG,CAAC,EAAE;MAC5BhD,aAAa,CAAC+D,OAAO,CAAC,CAACC,IAAI,EAAE1B,KAAK,KAAK;QACrCoB,QAAQ,CAACE,MAAM,CAAC,OAAOtB,KAAK,GAAG,CAAC,EAAE,EAAE0B,IAAI,CAAC;MAC3C,CAAC,CAAC;IACJ;IAEA,IAAI;MACFrD,OAAO,CAACQ,GAAG,CAAC,6BAA6B,CAAC;MAC1C,MAAMd,QAAQ,GAAG,MAAMlD,KAAK,CAAC8G,IAAI,CAC/B,kFAAkF,EAClFP,QAAQ,EACR;QACElD,OAAO,EAAE;UACP,aAAa,EAAEJ,YAAY,CAAC;UAC5B;QACF;QACA;MACF,CACF,CAAC;;MAED;MACA,MAAM8D,MAAM,GAAG7D,QAAQ,CAACI,IAAI,CAAC0D,MAAM,IAAI,qBAAqB;MAC5D,MAAMC,QAAQ,GAAG/D,QAAQ,CAACI,IAAI,CAAC4D,MAAM,IAAI,EAAE;;MAE3C;MACA,MAAMC,UAAU,GAAG;QAAEjB,IAAI,EAAEa,MAAM;QAAEX,MAAM,EAAE;MAAM,CAAC;MAClD5F,WAAW,CAAE4G,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAED,UAAU,CAAC,CAAC;MAE5DF,QAAQ,CAACL,OAAO,CAAES,MAAM,IAAK;QAC3B,MAAMC,aAAa,GAAG;UAAEJ,MAAM,EAAE,CAAC;YAAEK,GAAG,EAAEF;UAAO,CAAC,CAAC;UAAEjB,MAAM,EAAE;QAAM,CAAC;QAClE5F,WAAW,CAAE4G,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEE,aAAa,CAAC,CAAC;MACjE,CAAC,CAAC;MAEF,IAAI3E,UAAU,EAAE;QACd,MAAM6E,gBAAgB,GAAG,CAAC,GAAGjH,QAAQ,EAAE;UAAE2F,IAAI,EAAEI,OAAO;UAAEF,MAAM,EAAE;QAAK,CAAC,EAAEe,UAAU,CAAC,CAChFlB,GAAG,CAACwB,GAAG;UAAA,IAAAC,WAAA;UAAA,OAAID,GAAG,CAACvB,IAAI,MAAAwB,WAAA,GAAID,GAAG,CAACP,MAAM,cAAAQ,WAAA,uBAAVA,WAAA,CAAa,CAAC,CAAC,CAACH,GAAG,KAAI,EAAE;QAAA,EAAC,CACjDI,IAAI,CAAC,IAAI,CAAC;QAEb,MAAM3H,KAAK,CAAC8G,IAAI,CACd,uFAAuF,EACvF;UAAEc,iBAAiB,EAAEJ;QAAiB,CAAC,EACvC;UACEnE,OAAO,EAAE;YAAE,aAAa,EAAEJ,YAAY,CAAC;UAAE,CAAC;UAC1CG,eAAe,EAAE;QACnB,CACF,CAAC;MACH;MAEA,IAAI3C,YAAY,EAAE;QAChBoH,SAAS,CAACd,MAAM,EAAE5E,MAAM,GAAG,GAAG,CAAC;MACjC;IACF,CAAC,CAAC,OAAOoB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IAC3D;EACF,CAAC;;EAED;EACA,MAAMsE,SAAS,GAAGA,CAAC3B,IAAI,EAAE4B,WAAW,GAAG,GAAG,KAAK;IAC7C,IAAI,iBAAiB,IAAIxF,MAAM,EAAE;MAC/B,MAAMyF,SAAS,GAAG,IAAIC,wBAAwB,CAAC9B,IAAI,CAAC;MACpD6B,SAAS,CAAC5F,MAAM,GAAG2F,WAAW,CAAC,CAAE;MACjCxF,MAAM,CAAC2F,eAAe,CAACC,KAAK,CAACH,SAAS,CAAC;IACzC,CAAC,MAAM;MACLvE,OAAO,CAAC2E,IAAI,CAAC,mCAAmC,CAAC;IACnD;EACF,CAAC;EAED,oBACEjI,OAAA;IAAKkI,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BnI,OAAA;MAAKkI,SAAS,EAAC,cAAc;MAAAC,QAAA,eAC3BnI,OAAA;QAAQkI,SAAS,EAAC,UAAU;QAACE,OAAO,EAAE9D,iBAAkB;QAAA6D,QAAA,eACtDnI,OAAA;UAAKqI,GAAG,EAAExI,OAAQ;UAACyI,GAAG,EAAC;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EAGL3H,iBAAiB,iBAChBf,OAAA;MAAKkI,SAAS,EAAC,cAAc;MAAAC,QAAA,gBAC3BnI,OAAA;QAAAmI,QAAA,EAAI;MAAiB;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1B1I,OAAA;QAAKkI,SAAS,EAAC,aAAa;QAAAC,QAAA,EACzBlH,OAAO,CAAC8E,GAAG,CAAC,CAACvB,MAAM,EAAES,KAAK,kBACzBjF,OAAA;UAEEoI,OAAO,EAAEA,CAAA,KAAM7D,qBAAqB,CAACC,MAAM,CAAE;UAC7C0D,SAAS,EAAE,iBAAiB/G,eAAe,CAACwD,QAAQ,CAACH,MAAM,CAAC,GAAG,UAAU,GAAG,EAAE,EAAG;UAAA2D,QAAA,EAEhF3D;QAAM,GAJFS,KAAK;UAAAsD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKJ,CACT;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eACN1I,OAAA;QAAQoI,OAAO,EAAE9D,iBAAkB;QAAC4D,SAAS,EAAC,oBAAoB;QAAAC,QAAA,EAAC;MAAK;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9E,CACN,eAED1I,OAAA;MAAKkI,SAAS,EAAC,mBAAmB;MAAAC,QAAA,eAClCnI,OAAA,CAAC2I,OAAO;QACN1H,OAAO,EAAEA,OAAQ;QACjBsB,mBAAmB,EAAEA,mBAAoB;QACzCqD,yBAAyB,EAAEA,yBAA0B;QACrDZ,qBAAqB,EAAEA,qBAAsB;QAC7C/C,MAAM,EAAEA,MAAO;QACfC,SAAS,EAAEA,SAAU;QACrB+B,oBAAoB,EAAEA,oBAAqB;QAC3CE,mBAAmB,EAAEA,mBAAoB;QACzCpC,WAAW,EAAEA,WAAY,CAAC;QAAA;QAC1B+C,kBAAkB,EAAEA,kBAAmB,CAAE;QAAA;QACzCzD,UAAU,EAAEA,UAAW;QACvBgD,SAAS,EAAEA,SAAU;QACrB9D,YAAY,EAAEA;MAAa;QAAAgI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,eAEN1I,OAAA;MAAKkI,SAAS,EAAC,gBAAgB;MAAAC,QAAA,eAC7BnI,OAAA;QAAQkI,SAAS,EAAC,YAAY;QAAAC,QAAA,eAC5BnI,OAAA;UAAKqI,GAAG,EAAEzI,SAAU;UAAC0I,GAAG,EAAC;QAAW;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAEN1I,OAAA;MAAKkI,SAAS,EAAC,wBAAwB;MAAAC,QAAA,eACrCnI,OAAA,CAAC4I,kBAAkB;QAACvI,QAAQ,EAAEA;MAAS;QAAAkI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC,eAEN1I,OAAA;MAAKkI,SAAS,EAAC,qBAAqB;MAAAC,QAAA,eAClCnI,OAAA,CAAC6I,YAAY;QACXlG,aAAa,EAAEA,aAAc;QAC7BC,gBAAgB,EAAEA,gBAAiB;QACnCf,MAAM,EAAEA,MAAO,CAAC;QAAA;QAChBC,SAAS,EAAEA,SAAU;QACrBgH,cAAc,EAAGjH,MAAM,IAAK;UAC1B,MAAMkH,UAAU,GAAG;YAAE/C,IAAI,EAAEnE,MAAM;YAAEqE,MAAM,EAAE;UAAK,CAAC;UACjD5F,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAE0I,UAAU,CAAC,CAAC;UACtC5C,iBAAiB,CAACtE,MAAM,CAAC;QAC3B,CAAE;QACFmH,YAAY,EAAGrC,IAAI,IAAKrD,OAAO,CAACQ,GAAG,CAAC,gBAAgB,EAAE6C,IAAI,CAACxB,IAAI,CAAE;QACjE8D,kBAAkB,EAAEA,CAAA,KAAMC,SAAS,CAACC,SAAS,CAACC,SAAS,CAAC/I,QAAQ,CAAC0F,GAAG,CAACsD,CAAC,IAAIA,CAAC,CAACrD,IAAI,CAAC,CAACyB,IAAI,CAAC,IAAI,CAAC;MAAE;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/F;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EAGLnH,aAAa,iBACZvB,OAAA;MAAKkI,SAAS,EAAC,SAAS;MAAAC,QAAA,eACtBnI,OAAA;QAAKkI,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACzBnI,OAAA;UAAAmI,QAAA,EAAI;QAAW;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACpB1I,OAAA;UACEsJ,IAAI,EAAC,MAAM;UACXC,KAAK,EAAE5H,aAAc;UACrB6H,QAAQ,EAAG3E,CAAC,IAAKjD,gBAAgB,CAACiD,CAAC,CAAC4E,MAAM,CAACF,KAAK;QAAE;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnD,CAAC,eACF1I,OAAA;UAAQoI,OAAO,EAAElD,oBAAqB;UAAAiD,QAAA,EAAC;QAAI;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACpD1I,OAAA;UAAQoI,OAAO,EAAEA,CAAA,KAAM5G,gBAAgB,CAAC,KAAK,CAAE;UAAA2G,QAAA,EAAC;QAAM;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5D;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;;AAEA;AAAAtI,EAAA,CA5VSD,kBAAkB;AAAAuJ,EAAA,GAAlBvJ,kBAAkB;AA6V3B,SAASwI,OAAOA,CAAC;EACf1H,OAAO;EACP+D,qBAAqB;EACrBzC,mBAAmB;EACnBqD,yBAAyB;EACzB3D,MAAM;EACNC,SAAS;EACT+B,oBAAoB;EACpBE,mBAAmB;EACnBpC,WAAW;EACX+C,kBAAkB;EAClBzD,UAAU;EACVgD,SAAS;EACT9D;AACF,CAAC,EAAE;EAAAoJ,GAAA;EACD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGpK,QAAQ,CAAC,SAAS,CAAC;EACzD,MAAMqK,OAAO,GAAG,CAAC,gBAAgB,EAAE,oBAAoB,EAAE,eAAe,EAAE,gBAAgB,EAAE,qBAAqB,CAAC;EAClH,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGvK,QAAQ,CAAC,CAAC,CAAC;EAE/D,MAAMwK,kBAAkB,GAAGA,CAAA,KAAM;IAC/BJ,cAAc,CAACC,OAAO,CAACC,kBAAkB,CAAC,CAAC;EAC7C,CAAC;EAED,MAAMG,UAAU,GAAGA,CAAA,KAAM;IACvBL,cAAc,CAAC,SAAS,CAAC;EAC3B,CAAC;EAED,MAAMM,YAAY,GAAIC,SAAS,IAAK;IAClC,IAAIA,SAAS,KAAK,IAAI,EAAE;MACtBJ,qBAAqB,CAAEK,IAAI,IAAMA,IAAI,KAAK,CAAC,GAAGP,OAAO,CAACnE,MAAM,GAAG,CAAC,GAAG0E,IAAI,GAAG,CAAE,CAAC;IAC/E,CAAC,MAAM;MACLL,qBAAqB,CAAEK,IAAI,IAAMA,IAAI,KAAKP,OAAO,CAACnE,MAAM,GAAG,CAAC,GAAG,CAAC,GAAG0E,IAAI,GAAG,CAAE,CAAC;IAC/E;EACF,CAAC;EAED,oBACErK,OAAA;IAAKkI,SAAS,EAAC,mBAAmB;IAAAC,QAAA,EACnCyB,WAAW,KAAK,SAAS,gBACxB5J,OAAA;MAAKkI,SAAS,EAAC,eAAe;MAAAC,QAAA,gBAC5BnI,OAAA;QAAKkI,SAAS,EAAC,kBAAkB;QAAAC,QAAA,eAC/BnI,OAAA;UAAKkI,SAAS,EAAC,gBAAgB;UAAAC,QAAA,EAC5B2B,OAAO,CAACC,kBAAkB;QAAC;UAAAxB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eACN1I,OAAA;QAAKkI,SAAS,EAAC,kBAAkB;QAAAC,QAAA,gBAC/BnI,OAAA;UAAQoI,OAAO,EAAEA,CAAA,KAAM+B,YAAY,CAAC,IAAI,CAAE;UAACjC,SAAS,EAAC,UAAU;UAAAC,QAAA,EAAC;QAAC;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC1E1I,OAAA;UAAQoI,OAAO,EAAE6B,kBAAmB;UAAC/B,SAAS,EAAC,eAAe;UAAAC,QAAA,EAAC;QAAM;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC9E1I,OAAA;UAAQoI,OAAO,EAAEA,CAAA,KAAM+B,YAAY,CAAC,MAAM,CAAE;UAACjC,SAAS,EAAC,YAAY;UAAAC,QAAA,EAAC;QAAC;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3E,CAAC,eAEN1I,OAAA;QAAKkI,SAAS,EAAC,yBAAyB;QAAAC,QAAA,gBACtCnI,OAAA;UAAMkI,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAC;QAAa;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC,eACnD1I,OAAA;UACEsJ,IAAI,EAAC,OAAO;UACZpB,SAAS,EAAC,eAAe;UACzBoC,GAAG,EAAC,GAAG;UACPC,GAAG,EAAC,KAAK;UACThB,KAAK,EAAEtH,MAAO;UACduH,QAAQ,EAAG3E,CAAC,IAAK3C,SAAS,CAACsI,MAAM,CAAC3F,CAAC,CAAC4E,MAAM,CAACF,KAAK,CAAC;QAAE;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpD,CAAC,eACF1I,OAAA;UAAMkI,SAAS,EAAC,cAAc;UAAAC,QAAA,EAAElG;QAAM;UAAAsG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,gBAEF1I,OAAA;MAAKkI,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BnI,OAAA;QAAAmI,QAAA,EAAKyB;MAAW;QAAArB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACtB1I,OAAA;QAAKkI,SAAS,EAAC,uBAAuB;QAAAC,QAAA,GACnCyB,WAAW,KAAK,gBAAgB,iBAC/B5J,OAAA,CAAAE,SAAA;UAAAiI,QAAA,gBACEnI,OAAA;YAAAmI,QAAA,EAAG;UAAiC;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACxC1I,OAAA;YAAQoI,OAAO,EAAE/D,SAAU;YAAC6D,SAAS,EAAE,cAAc3H,YAAY,GAAG,aAAa,GAAG,cAAc,EAAG;YAAA4H,QAAA,EAClG5H,YAAY,GAAG,aAAa,GAAG;UAAY;YAAAgI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACtC,CAAC,eAET1I,OAAA;YAAKkI,SAAS,EAAC,yBAAyB;YAAAC,QAAA,gBACtCnI,OAAA;cAAMkI,SAAS,EAAC,cAAc;cAAAC,QAAA,EAAC;YAAW;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACjD1I,OAAA;cACEsJ,IAAI,EAAC,OAAO;cACZpB,SAAS,EAAC,eAAe;cACzBoC,GAAG,EAAC,GAAG;cACPC,GAAG,EAAC,KAAK;cACThB,KAAK,EAAEtH,MAAO;cACduH,QAAQ,EAAG3E,CAAC,IAAK3C,SAAS,CAACsI,MAAM,CAAC3F,CAAC,CAAC4E,MAAM,CAACF,KAAK,CAAC;YAAE;cAAAhB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACpD,CAAC,eACF1I,OAAA;cAAMkI,SAAS,EAAC,cAAc;cAAAC,QAAA,GAAC,GAAC,EAAClG,MAAM;YAAA;cAAAsG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC5C,CAAC;QAAA,eACN,CACH,EACAkB,WAAW,KAAK,oBAAoB,iBACnC5J,OAAA,CAAAE,SAAA;UAAAiI,QAAA,gBACEnI,OAAA;YAAAmI,QAAA,EAAG;UAA2B;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eAClC1I,OAAA;YAAQoI,OAAO,EAAErG,WAAW,GAAGoC,mBAAmB,GAAGF,oBAAqB;YAAAkE,QAAA,EACvEpG,WAAW,GAAG,gBAAgB,GAAG;UAAiB;YAAAwG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC7C,CAAC;QAAA,eACT,CACH,EACAkB,WAAW,KAAK,eAAe,iBAC9B5J,OAAA,CAAAE,SAAA;UAAAiI,QAAA,gBACEnI,OAAA;YAAAmI,QAAA,EAAG;UAAsB;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eAC7B1I,OAAA;YACEkI,SAAS,EAAC,cAAc;YACxBqB,KAAK,EAAElI,UAAU,IAAI,EAAG;YACxBmI,QAAQ,EAAG3E,CAAC,IAAKC,kBAAkB,CAACD,CAAC,CAAC4E,MAAM,CAACF,KAAK,CAAE;YAAApB,QAAA,gBAEpDnI,OAAA;cAAQuJ,KAAK,EAAC,EAAE;cAACkB,QAAQ;cAAAtC,QAAA,EAAC;YAAa;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAChD1I,OAAA;cAAQuJ,KAAK,EAAC,SAAS;cAAApB,QAAA,EAAC;YAAO;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACxC1I,OAAA;cAAQuJ,KAAK,EAAC,eAAe;cAAApB,QAAA,EAAC;YAAa;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACpD1I,OAAA;cAAQuJ,KAAK,EAAC,kBAAkB;cAAApB,QAAA,EAAC;YAAgB;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpD,CAAC;QAAA,eACT,CACH,EACAkB,WAAW,KAAK,gBAAgB,iBAC/B5J,OAAA;UAAKkI,SAAS,EAAC,aAAa;UAAAC,QAAA,EACzBlH,OAAO,CAAC8E,GAAG,CAAC,CAACvB,MAAM,EAAES,KAAK,kBACzBjF,OAAA;YAAoBkI,SAAS,EAAC,eAAe;YAACE,OAAO,EAAEA,CAAA,KAAMpD,qBAAqB,CAACC,KAAK,CAAE;YAAAkD,QAAA,EACvF3D;UAAM,GADIS,KAAK;YAAAsD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEV,CACT;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CACN,EACAkB,WAAW,KAAK,qBAAqB,iBACpC5J,OAAA,CAAAE,SAAA;UAAAiI,QAAA,gBACEnI,OAAA;YAAAmI,QAAA,EAAG;UAAgC;YAAAI,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACvC1I,OAAA;YAAKkI,SAAS,EAAC,sBAAsB;YAAAC,QAAA,EAClC5F,mBAAmB,CAACoD,MAAM,GAAG,CAAC,GAC7BpD,mBAAmB,CAACwD,GAAG,CAAC,CAAC2E,IAAI,EAAEzF,KAAK,kBAClCjF,OAAA;cAEEkI,SAAS,EAAC,mBAAmB;cAC7BE,OAAO,EAAEA,CAAA,KAAMxC,yBAAyB,CAAC8E,IAAI,CAAChD,iBAAiB,CAAE;cAAAS,QAAA,EAEhE,GAAGuC,IAAI,CAACC,OAAO,mBAAmB,IAAIC,IAAI,CAACF,IAAI,CAACG,SAAS,CAAC,CAACC,cAAc,CAAC,CAAC;YAAE,GAJzE7F,KAAK;cAAAsD,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAKP,CACN,CAAC,gBAEF1I,OAAA;cAAAmI,QAAA,EAAG;YAAkC;cAAAI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG;UACzC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACE,CAAC;QAAA,eACN,CACH;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC,eACN1I,OAAA;QAAQoI,OAAO,EAAE8B,UAAW;QAAChC,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAC;MAAI;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/D;EACN;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;;AAEA;AAAAiB,GAAA,CApJShB,OAAO;AAAAoC,GAAA,GAAPpC,OAAO;AAqJhB,SAASC,kBAAkBA,CAAC;EAAEvI;AAAS,CAAC,EAAE;EAAA2K,GAAA;EACxC,MAAMC,eAAe,GAAGtL,MAAM,CAAC,IAAI,CAAC;EAEpCD,SAAS,CAAC,MAAM;IACd,IAAIuL,eAAe,CAACC,OAAO,EAAE;MAC3BD,eAAe,CAACC,OAAO,CAACC,SAAS,GAAGF,eAAe,CAACC,OAAO,CAACE,YAAY;IAC1E;EACF,CAAC,EAAE,CAAC/K,QAAQ,CAAC,CAAC;EAEd,oBACEL,OAAA;IAAKkI,SAAS,EAAC,qBAAqB;IAACmD,GAAG,EAAEJ,eAAgB;IAAA9C,QAAA,EACvD9H,QAAQ,CAAC0F,GAAG,CAAC,CAACK,OAAO,EAAEnB,KAAK,kBAC3BjF,OAAA;MAAiBkI,SAAS,EAAE,kBAAkB9B,OAAO,CAACF,MAAM,GAAG,cAAc,GAAG,YAAY,EAAG;MAAAiC,QAAA,GAC5F/B,OAAO,CAACJ,IAAI,iBAAIhG,OAAA;QAAAmI,QAAA,EAAI/B,OAAO,CAACJ;MAAI;QAAAuC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACrCtC,OAAO,CAACY,MAAM,IAAIZ,OAAO,CAACY,MAAM,CAACjB,GAAG,CAAC,CAACuF,GAAG,EAAEC,QAAQ,kBAClDvL,OAAA;QAEEqI,GAAG,EAAEiD,GAAG,CAACjE,GAAI;QACbiB,GAAG,EAAC,aAAa;QACjBJ,SAAS,EAAC,mBAAmB;QAC7BsD,KAAK,EAAE;UAAEC,QAAQ,EAAE,MAAM;UAAEC,SAAS,EAAE,MAAM;UAAEC,YAAY,EAAE;QAAM;MAAE,GAJ/DJ,QAAQ;QAAAhD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKd,CACF,CAAC;IAAA,GAVMzD,KAAK;MAAAsD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAWV,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAAsC,GAAA,CAxCSpC,kBAAkB;AAAAgD,GAAA,GAAlBhD,kBAAkB;AAyC3B,SAASC,YAAYA,CAAC;EAAEhH,MAAM;EAAEC,SAAS;EAAEgH,cAAc;EAAEE,YAAY;EAAEC,kBAAkB;EAAEtG,aAAa;EAAEC;AAAiB,CAAC,EAAE;EAE9H,MAAMiJ,iBAAiB,GAAIhH,CAAC,IAAK;IAC/B/C,SAAS,CAAC+C,CAAC,CAAC4E,MAAM,CAACF,KAAK,CAAC;IACzB1E,CAAC,CAAC4E,MAAM,CAAC+B,KAAK,CAACM,MAAM,GAAG,MAAM;IAC9BjH,CAAC,CAAC4E,MAAM,CAAC+B,KAAK,CAACM,MAAM,GAAG,GAAGjH,CAAC,CAAC4E,MAAM,CAAC2B,YAAY,IAAI;EACtD,CAAC;EAED,MAAMW,gBAAgB,GAAIlH,CAAC,IAAK;IAC9B,MAAMmH,KAAK,GAAGC,KAAK,CAACC,IAAI,CAACrH,CAAC,CAAC4E,MAAM,CAACuC,KAAK,CAAC;IACxC,IAAIrJ,aAAa,CAACgD,MAAM,GAAGqG,KAAK,CAACrG,MAAM,GAAG,CAAC,EAAE;MAC3CwG,KAAK,CAAC,8CAA8C,CAAC;MACrD;IACF;IAEA,MAAMC,QAAQ,GAAGJ,KAAK,CAACjG,GAAG,CAAEY,IAAI,IAAK;MACnC,IAAIA,IAAI,CAAC2C,IAAI,CAAC7D,UAAU,CAAC,QAAQ,CAAC,EAAE;QAClC;QACA,MAAM4G,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;QAC/BD,MAAM,CAACE,MAAM,GAAI1H,CAAC,IAAK;UACrB8B,IAAI,CAAC6F,OAAO,GAAG3H,CAAC,CAAC4E,MAAM,CAACgD,MAAM,CAAC,CAAC;UAChC7J,gBAAgB,CAAEyH,IAAI,IAAK,CAAC,GAAGA,IAAI,CAAC,CAAC,CAAC,CAAC;QACzC,CAAC;QACDgC,MAAM,CAACK,aAAa,CAAC/F,IAAI,CAAC;MAC5B;MACA,OAAOA,IAAI;IACb,CAAC,CAAC;IAEF/D,gBAAgB,CAAEyH,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAE,GAAG+B,QAAQ,CAAC,CAAC;IAClDJ,KAAK,CAACtF,OAAO,CAAEC,IAAI,IAAKqC,YAAY,CAACrC,IAAI,CAAC,CAAC,CAAC,CAAC;EAC/C,CAAC;EAED,MAAMgG,gBAAgB,GAAI1H,KAAK,IAAK;IAClC,MAAM2H,YAAY,GAAGjK,aAAa,CAACiC,MAAM,CAAC,CAACiI,CAAC,EAAEC,CAAC,KAAKA,CAAC,KAAK7H,KAAK,CAAC;IAChErC,gBAAgB,CAACgK,YAAY,CAAC;EAChC,CAAC;EAED,MAAMG,UAAU,GAAIlI,CAAC,IAAK;IACxB,IAAIhD,MAAM,KAAK,EAAE,EAAE;MACjBgD,CAAC,CAAC4E,MAAM,CAAC+B,KAAK,CAACM,MAAM,GAAG,MAAM;IAChC;EACF,CAAC;EAED,oBACE9L,OAAA;IAAKkI,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAE5BnI,OAAA;MAAKkI,SAAS,EAAC,0BAA0B;MAAAC,QAAA,EACtCxF,aAAa,CAACoD,GAAG,CAAC,CAACY,IAAI,EAAE1B,KAAK,kBAC7BjF,OAAA;QAAiBkI,SAAS,EAAC,qBAAqB;QAAAC,QAAA,GAC7CxB,IAAI,CAAC6F,OAAO,gBACXxM,OAAA;UAAKqI,GAAG,EAAE1B,IAAI,CAAC6F,OAAQ;UAAClE,GAAG,EAAE3B,IAAI,CAACxB,IAAK;UAAC+C,SAAS,EAAC;QAAqB;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,gBAE1E1I,OAAA;UAAAmI,QAAA,EAAOxB,IAAI,CAACxB;QAAI;UAAAoD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CACxB,eACD1I,OAAA;UAAQoI,OAAO,EAAEA,CAAA,KAAMuE,gBAAgB,CAAC1H,KAAK,CAAE;UAACiD,SAAS,EAAC,oBAAoB;UAAAC,QAAA,EAAC;QAAC;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA,GANjFzD,KAAK;QAAAsD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOV,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAEN1I,OAAA;MACEuJ,KAAK,EAAE1H,MAAO;MACd2H,QAAQ,EAAG3E,CAAC,IAAK/C,SAAS,CAAC+C,CAAC,CAAC4E,MAAM,CAACF,KAAK,CAAE;MAC3CyD,MAAM,EAAED,UAAW;MACnB7E,SAAS,EAAC,cAAc;MACxB+E,WAAW,EAAC,2BAA2B;MACvCC,IAAI,EAAE,CAAE;MACR1B,KAAK,EAAE;QAAEM,MAAM,EAAE;MAAO;IAAE;MAAAvD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC,eACF1I,OAAA;MAAQoI,OAAO,EAAEA,CAAA,KAAMU,cAAc,CAACjH,MAAM,CAAE;MAAAsG,QAAA,EAAC;IAAM;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC9D1I,OAAA;MAAQoI,OAAO,EAAEa,kBAAmB;MAAAd,QAAA,EAAC;IAAiB;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC/D1I,OAAA;MAAQoI,OAAO,EAAEA,CAAA,KAAM/C,QAAQ,CAAC8H,cAAc,CAAC,aAAa,CAAC,CAACC,KAAK,CAAC,CAAE;MAAAjF,QAAA,EAAC;IAAW;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC3F1I,OAAA;MAAOsJ,IAAI,EAAC,MAAM;MAAC+D,EAAE,EAAC,aAAa;MAAC7B,KAAK,EAAE;QAAE8B,OAAO,EAAE;MAAO,CAAE;MAAC9D,QAAQ,EAAEuC;IAAiB;MAAAxD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3F,CAAC;AAEV;AAAC6E,GAAA,GA1EQ1E,YAAY;AA4ErB,eAAe1I,kBAAkB;AAAC,IAAAuJ,EAAA,EAAAqB,GAAA,EAAAa,GAAA,EAAA2B,GAAA;AAAAC,YAAA,CAAA9D,EAAA;AAAA8D,YAAA,CAAAzC,GAAA;AAAAyC,YAAA,CAAA5B,GAAA;AAAA4B,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}