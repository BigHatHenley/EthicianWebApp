{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hat\\\\Documents\\\\Work Stuff\\\\EthicianWebApp\\\\ReactFrontend\\\\src\\\\components\\\\MultiChatXpertPage.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './MultiChatXpertPage.css';\nimport userImage from './images/personTyping.gif';\nimport aiImage from './images/AILooking.gif';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction MultiChatXpertPage() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [isTTSEnabled, setTTSEnabled] = useState(false);\n  const [isSpeechRecognitionOpen, setSpeechRecognitionOpen] = useState(false);\n  const [isLLMSelectionOpen, setLLMSelectionOpen] = useState(false);\n  const [isUpdateExpertsOpen, setUpdateExpertsOpen] = useState(false);\n  const [isExpertPopupOpen, setExpertPopupOpen] = useState(false);\n  const [experts, setExperts] = useState([\"Ethician\", \"Mechanical Engineer\", \"Metallurgist\", \"Safety Engineer\", \"Materials Engineer\", \"Robotics Engineer\", \"Electrical Engineer\", \"Civil Engineer\", \"Software Engineer\", \"Chemical Engineer\", \"Aerospace Engineer\", \"Petroleum Engineer\", \"Biomedical Engineer\", \"Environment Engineer\", \"Quality Engineer\"]);\n  const [selectedExperts, setSelectedExperts] = useState([]);\n  const [currentLLM, setCurrentLLM] = useState(null);\n  const [showEditPopup, setShowEditPopup] = useState(false); // Track if edit popup is open\n  const [currentExpertEdit, setCurrentExpertEdit] = useState(null); // Track current expert to edit\n  const [newExpertName, setNewExpertName] = useState(\"\"); // Track new expert name input\n  // State for toggling expert selection\n  const [expertToggles, setExpertToggles] = useState(Array(15).fill(false));\n  const [prompt, setPrompt] = useState(\"\");\n  const [isListening, setIsListening] = useState(false);\n  const [volume, setVolume] = useState(50); // Volume state\n\n  // Check if the browser supports speech recognition\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n  const recognition = SpeechRecognition ? new SpeechRecognition() : null;\n  const [transcript, setTranscript] = useState(\"\");\n  const [error, setError] = useState(null);\n  const [conversationHistory, setConversationHistory] = useState([]);\n  const [isLoggedIn, setIsLoggedIn] = useState(false); // Assume initially logged out\n\n  useEffect(() => {\n    const fetchConversations = async () => {\n      try {\n        const response = await axios.get('https://localhost:8000/api/get_conversations/', {\n          withCredentials: true\n        });\n        setConversationHistory(response.data);\n        setIsLoggedIn(true); // Set logged-in state based on successful fetch\n      } catch (error) {\n        console.error('Error fetching conversation history:', error);\n        setIsLoggedIn(false); // If error, assume not logged in\n      }\n    };\n    fetchConversations();\n  }, []);\n  if (recognition) {\n    recognition.continuous = false;\n    recognition.interimResults = false;\n    recognition.lang = 'en-US';\n    recognition.onresult = event => {\n      const transcript = event.results[0][0].transcript;\n      setPrompt(transcript); // Update the entry bar with the transcribed text\n      console.log(\"Transcribed Text:\", transcript); // Log transcription to browser console\n    };\n    recognition.onerror = event => {\n      console.error(\"Speech recognition error:\", event.error); // Error handling in console\n      setIsListening(false); // Reset listening state\n    };\n    recognition.onend = () => {\n      console.log(\"Speech recognition ended.\"); // Log end of recognition to browser console\n      setIsListening(false); // Ensure the recording state is reset\n    };\n  }\n\n  // Start listening for speech\n  const handleStartListening = () => {\n    if (recognition && !isListening) {\n      setPrompt(\"\"); // Clear any previous text in entry bar\n      setIsListening(true);\n      console.log(\"Starting Speech Recognition\"); // Log to browser console\n      recognition.start();\n    }\n  };\n\n  // Stop listening for speech\n  const handleStopListening = () => {\n    if (recognition && isListening) {\n      console.log(\"Stopping Speech Recognition\"); // Log to browser console\n      recognition.stop();\n      setIsListening(false); // Reset state so user can restart recording\n    }\n  };\n  const handlePromptSubmit = () => {\n    const newMessage = {\n      text: prompt,\n      isUser: true\n    };\n    setMessages([...messages, newMessage]);\n    handleSendMessage(prompt);\n    setPrompt(\"\");\n  };\n  const openPopup = setting => {\n    setTTSEnabled(false);\n    setSpeechRecognitionOpen(false);\n    setLLMSelectionOpen(false);\n    setUpdateExpertsOpen(false);\n    if (setting === \"TTS\") setTTSEnabled(true);\n    if (setting === \"SpeechRecognition\") setSpeechRecognitionOpen(true);\n    if (setting === \"LLMSelection\") setLLMSelectionOpen(true);\n    if (setting === \"UpdateExperts\") setUpdateExpertsOpen(true);\n  };\n\n  // Function to toggle TTS setting\n  const toggleTTS = () => {\n    setTTSEnabled(!isTTSEnabled);\n    console.log(\"TTS Enabled:\", !isTTSEnabled); // Log for confirmation\n  };\n  const toggleExpertPopup = () => {\n    setExpertPopupOpen(!isExpertPopupOpen);\n  };\n  const updateExpertName = (index, newName) => {\n    const updatedExperts = [...experts];\n    updatedExperts[index] = newName;\n    setExperts(updatedExperts);\n  };\n\n  // Function to handle expert selection in the AI Image popup\n  const handleExpertSelection = expert => {\n    setSelectedExperts(prevExperts => {\n      const updatedExperts = prevExperts.includes(expert) ? prevExperts.filter(e => e !== expert) : [...prevExperts, expert];\n      console.log(\"Updated selectedExperts:\", updatedExperts); // Log after update\n      return updatedExperts;\n    });\n  };\n  const handleLLMSelection = llm => {\n    setCurrentLLM(llm);\n    console.log(\"Updated currentLLM:\", llm); // Log after update\n  };\n  const handleEditExpertClick = index => {\n    setCurrentExpertEdit(index);\n    setNewExpertName(experts[index]);\n    setShowEditPopup(true);\n  };\n  const handleSaveExpertName = () => {\n    const updatedExperts = [...experts];\n    updatedExperts[currentExpertEdit] = newExpertName;\n    setExperts(updatedExperts);\n    setShowEditPopup(false);\n  };\n  function getCsrfToken() {\n    const name = 'csrftoken';\n    const cookies = document.cookie.split(';');\n    for (let cookie of cookies) {\n      cookie = cookie.trim();\n      if (cookie.startsWith(name + '=')) {\n        return cookie.substring(name.length + 1);\n      }\n    }\n    return null;\n  }\n  const handleRestoreConversation = conversationText => {\n    // Assuming conversationText is newline-delimited for each message\n    const restoredMessages = conversationText.split('\\n').map((text, idx) => ({\n      text,\n      isUser: idx % 2 === 0 // Toggle between user and AI messages for simplicity\n    }));\n    setMessages(restoredMessages);\n  };\n  const handleSendMessage = async message => {\n    try {\n      const response = await axios.post('https://localhost:8000/api/analyze_text/', {\n        text: message,\n        selected_experts: selectedExperts,\n        selected_option: currentLLM\n      }, {\n        headers: {\n          'X-CSRFToken': getCsrfToken()\n        },\n        withCredentials: true\n      });\n      const aiText = response.data.output || \"No response from AI\";\n      const aiResponse = {\n        text: aiText,\n        isUser: false\n      };\n      setMessages(prevMessages => [...prevMessages, aiResponse]);\n      if (isLoggedIn) {\n        const fullConversation = [...messages, {\n          text: message,\n          isUser: true\n        }, aiResponse].map(msg => msg.text).join('\\n');\n        await axios.post('https://localhost:8000/api/save_conversation/', {\n          conversation_text: fullConversation\n        }, {\n          headers: {\n            'X-CSRFToken': getCsrfToken()\n          },\n          withCredentials: true\n        });\n      }\n      if (isTTSEnabled) {\n        speakText(aiText, volume / 100);\n      }\n    } catch (error) {\n      console.error('Error sending message to backend:', error);\n    }\n  };\n\n  // Ensure `speakText` uses the specified volume\n  const speakText = (text, volumeLevel = 0.5) => {\n    if ('speechSynthesis' in window) {\n      const utterance = new SpeechSynthesisUtterance(text);\n      utterance.volume = volumeLevel; // Volume adjusted here\n      window.speechSynthesis.speak(utterance);\n    } else {\n      console.warn(\"TTS not supported in this browser\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"my-ui-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ai-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ai-image\",\n        onClick: toggleExpertPopup,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: aiImage,\n          alt: \"AI Expert\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this), isExpertPopupOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"expert-popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Available Experts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"expert-grid\",\n        children: experts.map((expert, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleExpertSelection(expert),\n          className: `expert-button ${selectedExperts.includes(expert) ? 'selected' : ''}`,\n          children: expert\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleExpertPopup,\n        className: \"close-popup-button\",\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"console-container\",\n      children: /*#__PURE__*/_jsxDEV(Console, {\n        experts: experts,\n        conversationHistory: conversationHistory,\n        handleRestoreConversation: handleRestoreConversation,\n        handleEditExpertClick: handleEditExpertClick,\n        volume: volume,\n        setVolume: setVolume,\n        handleStartListening: handleStartListening,\n        handleStopListening: handleStopListening,\n        isListening: isListening // Control the button label and behavior\n        ,\n        handleLLMSelection: handleLLMSelection // Pass handleLLMSelection to Console\n        ,\n        currentLLM: currentLLM,\n        toggleTTS: toggleTTS,\n        isTTSEnabled: isTTSEnabled\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"user-image\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: userImage,\n          alt: \"User Icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"conversation-container\",\n      children: /*#__PURE__*/_jsxDEV(ConversationWindow, {\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"entry-box-container\",\n      children: /*#__PURE__*/_jsxDEV(InputSection, {\n        prompt: prompt // Pass the transcribed prompt\n        ,\n        setPrompt: setPrompt,\n        onPromptSubmit: prompt => {\n          const newMessage = {\n            text: prompt,\n            isUser: true\n          };\n          setMessages([...messages, newMessage]);\n          handleSendMessage(prompt);\n        },\n        onFileUpload: file => console.log('File uploaded:', file.name),\n        onCopyConversation: () => navigator.clipboard.writeText(messages.map(m => m.text).join('\\n'))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 7\n    }, this), showEditPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"edit-popup\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Edit Expert\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newExpertName,\n          onChange: e => setNewExpertName(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSaveExpertName,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowEditPopup(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 5\n  }, this);\n}\n\n// Console Component\n_s(MultiChatXpertPage, \"2KKTtDHM0aN7v82Kcbj9bLlVf8Y=\");\n_c = MultiChatXpertPage;\nfunction Console({\n  experts,\n  handleEditExpertClick,\n  conversationHistory,\n  handleRestoreConversation,\n  volume,\n  setVolume,\n  handleStartListening,\n  handleStopListening,\n  isListening,\n  handleLLMSelection,\n  currentLLM,\n  toggleTTS,\n  isTTSEnabled\n}) {\n  _s2();\n  const [currentView, setCurrentView] = useState(\"default\");\n  const options = [\"Text-To-Speech\", \"Speech Recognition\", \"LLM Selection\", \"Update Experts\", \"Conversation Select\"];\n  const [currentOptionIndex, setCurrentOptionIndex] = useState(0);\n  const handleSelectOption = () => {\n    setCurrentView(options[currentOptionIndex]);\n  };\n  const handleBack = () => {\n    setCurrentView(\"default\");\n  };\n  const handleScroll = direction => {\n    if (direction === 'up') {\n      setCurrentOptionIndex(prev => prev === 0 ? options.length - 1 : prev - 1);\n    } else {\n      setCurrentOptionIndex(prev => prev === options.length - 1 ? 0 : prev + 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"console-container\",\n    children: currentView === \"default\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settings-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"console-option\",\n        children: options[currentOptionIndex]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleScroll('up'),\n          className: \"up-arrow\",\n          children: \"\\u25B2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSelectOption,\n          className: \"select-button\",\n          children: \"Select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleScroll('down'),\n          className: \"down-arrow\",\n          children: \"\\u25BC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"volume-slider-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"volume-label\",\n          children: \"TTS Volume:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          className: \"volume-slider\",\n          min: \"0\",\n          max: \"100\",\n          value: volume,\n          onChange: e => setVolume(Number(e.target.value))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"volume-level\",\n          children: [\" \", volume]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settings-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentView\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-page-content\",\n        children: [currentView === \"Text-To-Speech\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Enable or disable Text-to-Speech:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 382,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: toggleTTS,\n            className: `tts-button ${isTTSEnabled ? 'tts-enabled' : 'tts-disabled'}`,\n            children: isTTSEnabled ? \"Disable TTS\" : \"Enable TTS\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 383,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"volume-slider-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"volume-label\",\n              children: \"TTS Volume:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              className: \"volume-slider\",\n              min: \"0\",\n              max: \"100\",\n              value: volume,\n              onChange: e => setVolume(Number(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 389,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"volume-level\",\n              children: [\" \", volume]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 397,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), currentView === \"Speech Recognition\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Control Speech Recognition:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: isListening ? handleStopListening : handleStartListening,\n            children: isListening ? \"Stop Recording\" : \"Start Recording\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), currentView === \"LLM Selection\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Select Language Model:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"llm-dropdown\",\n            value: currentLLM || \"\",\n            onChange: e => handleLLMSelection(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              disabled: true,\n              children: \"Select an LLM\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 417,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"ChatGPT\",\n              children: \"ChatGPT\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 418,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Google Gemini\",\n              children: \"Google Gemini\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 419,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"Anthropic Claude\",\n              children: \"Anthropic Claude\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 420,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true), currentView === \"Update Experts\" && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"expert-grid\",\n          children: experts.map((expert, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"expert-button\",\n            onClick: () => handleEditExpertClick(index),\n            children: expert\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 15\n        }, this), currentView === \"Conversation Select\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Select a conversation to review:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"conversation-history\",\n            children: conversationHistory.length > 0 ? conversationHistory.map((conv, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"conversation-item\",\n              onClick: () => handleRestoreConversation(conv.conversation_text),\n              children: `${conv.user_id}'s Conversation ${new Date(conv.timestamp).toLocaleString()}`\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 23\n            }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No conversation history available.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleBack,\n        className: \"back-button\",\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 351,\n    columnNumber: 5\n  }, this);\n}\n\n// ConversationWindow Component\n_s2(Console, \"EDZiq2nsR6IzKF+HOEuRUdC3Kmg=\");\n_c2 = Console;\nfunction ConversationWindow({\n  messages\n}) {\n  _s3();\n  const conversationRef = useRef(null);\n  useEffect(() => {\n    if (conversationRef.current) {\n      conversationRef.current.scrollTop = conversationRef.current.scrollHeight;\n    }\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"conversation-window\",\n    ref: conversationRef,\n    children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `message-bubble ${message.isUser ? 'user-message' : 'ai-message'}`,\n      children: [message.text && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: message.text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 28\n      }, this), message.images && message.images.map((img, imgIndex) => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: img.url,\n        alt: \"AI response\",\n        className: \"ai-image-response\",\n        style: {\n          maxWidth: '100%',\n          marginTop: '10px',\n          borderRadius: '8px'\n        }\n      }, imgIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 13\n      }, this))]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 472,\n    columnNumber: 5\n  }, this);\n}\n\n// TTS function\n_s3(ConversationWindow, \"Y7nFwtZO/hlnq7te7GKq0r5Z7DM=\");\n_c3 = ConversationWindow;\nfunction speakText(text) {\n  if ('speechSynthesis' in window) {\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.rate = 1; // You can adjust rate, pitch, and volume here if needed\n    window.speechSynthesis.speak(utterance);\n  } else {\n    console.warn(\"TTS not supported in this browser\");\n  }\n}\n\n// InputSection Component\nfunction InputSection({\n  prompt,\n  setPrompt,\n  onPromptSubmit,\n  onFileUpload,\n  onCopyConversation\n}) {\n  const handleInputChange = e => {\n    setPrompt(e.target.value);\n    e.target.style.height = \"auto\";\n    e.target.style.height = `${e.target.scrollHeight}px`;\n  };\n  const handleFileUpload = e => {\n    if (e.target.files.length > 0) {\n      onFileUpload(e.target.files[0]);\n    }\n  };\n  const handleBlur = e => {\n    if (prompt === \"\") {\n      e.target.style.height = \"20px\";\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: prompt,\n      onChange: handleInputChange,\n      onBlur: handleBlur,\n      className: \"prompt-input\",\n      placeholder: \"Type your message here...\",\n      rows: 1,\n      style: {\n        height: \"20px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => onPromptSubmit(prompt),\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onCopyConversation,\n      children: \"Copy Conversation\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => document.getElementById('file-upload').click(),\n      children: \"Upload File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      id: \"file-upload\",\n      style: {\n        display: 'none'\n      },\n      onChange: handleFileUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 525,\n    columnNumber: 5\n  }, this);\n}\n_c4 = InputSection;\nexport default MultiChatXpertPage;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"MultiChatXpertPage\");\n$RefreshReg$(_c2, \"Console\");\n$RefreshReg$(_c3, \"ConversationWindow\");\n$RefreshReg$(_c4, \"InputSection\");","map":{"version":3,"names":["React","useState","useEffect","useRef","userImage","aiImage","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","MultiChatXpertPage","_s","messages","setMessages","isTTSEnabled","setTTSEnabled","isSpeechRecognitionOpen","setSpeechRecognitionOpen","isLLMSelectionOpen","setLLMSelectionOpen","isUpdateExpertsOpen","setUpdateExpertsOpen","isExpertPopupOpen","setExpertPopupOpen","experts","setExperts","selectedExperts","setSelectedExperts","currentLLM","setCurrentLLM","showEditPopup","setShowEditPopup","currentExpertEdit","setCurrentExpertEdit","newExpertName","setNewExpertName","expertToggles","setExpertToggles","Array","fill","prompt","setPrompt","isListening","setIsListening","volume","setVolume","SpeechRecognition","window","webkitSpeechRecognition","recognition","transcript","setTranscript","error","setError","conversationHistory","setConversationHistory","isLoggedIn","setIsLoggedIn","fetchConversations","response","get","withCredentials","data","console","continuous","interimResults","lang","onresult","event","results","log","onerror","onend","handleStartListening","start","handleStopListening","stop","handlePromptSubmit","newMessage","text","isUser","handleSendMessage","openPopup","setting","toggleTTS","toggleExpertPopup","updateExpertName","index","newName","updatedExperts","handleExpertSelection","expert","prevExperts","includes","filter","e","handleLLMSelection","llm","handleEditExpertClick","handleSaveExpertName","getCsrfToken","name","cookies","document","cookie","split","trim","startsWith","substring","length","handleRestoreConversation","conversationText","restoredMessages","map","idx","message","post","selected_experts","selected_option","headers","aiText","output","aiResponse","prevMessages","fullConversation","msg","join","conversation_text","speakText","volumeLevel","utterance","SpeechSynthesisUtterance","speechSynthesis","speak","warn","className","children","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","Console","ConversationWindow","InputSection","onPromptSubmit","onFileUpload","file","onCopyConversation","navigator","clipboard","writeText","m","type","value","onChange","target","_c","_s2","currentView","setCurrentView","options","currentOptionIndex","setCurrentOptionIndex","handleSelectOption","handleBack","handleScroll","direction","prev","min","max","Number","disabled","conv","user_id","Date","timestamp","toLocaleString","_c2","_s3","conversationRef","current","scrollTop","scrollHeight","ref","images","img","imgIndex","url","style","maxWidth","marginTop","borderRadius","_c3","rate","handleInputChange","height","handleFileUpload","files","handleBlur","onBlur","placeholder","rows","getElementById","click","id","display","_c4","$RefreshReg$"],"sources":["C:/Users/Hat/Documents/Work Stuff/EthicianWebApp/ReactFrontend/src/components/MultiChatXpertPage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './MultiChatXpertPage.css';\r\nimport userImage from './images/personTyping.gif';\r\nimport aiImage from './images/AILooking.gif';\r\nimport axios from 'axios';\r\n\r\nfunction MultiChatXpertPage() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [isTTSEnabled, setTTSEnabled] = useState(false);\r\n  const [isSpeechRecognitionOpen, setSpeechRecognitionOpen] = useState(false);\r\n  const [isLLMSelectionOpen, setLLMSelectionOpen] = useState(false);\r\n  const [isUpdateExpertsOpen, setUpdateExpertsOpen] = useState(false);\r\n  const [isExpertPopupOpen, setExpertPopupOpen] = useState(false);\r\n  const [experts, setExperts] = useState([\r\n    \"Ethician\", \"Mechanical Engineer\", \"Metallurgist\", \"Safety Engineer\", \"Materials Engineer\",\r\n    \"Robotics Engineer\", \"Electrical Engineer\", \"Civil Engineer\", \"Software Engineer\", \"Chemical Engineer\",\r\n    \"Aerospace Engineer\", \"Petroleum Engineer\", \"Biomedical Engineer\", \"Environment Engineer\", \"Quality Engineer\"\r\n  ]);\r\n  const [selectedExperts, setSelectedExperts] = useState([]);\r\n  const [currentLLM, setCurrentLLM] = useState(null);\r\n  const [showEditPopup, setShowEditPopup] = useState(false); // Track if edit popup is open\r\n  const [currentExpertEdit, setCurrentExpertEdit] = useState(null); // Track current expert to edit\r\n  const [newExpertName, setNewExpertName] = useState(\"\"); // Track new expert name input\r\n  // State for toggling expert selection\r\n  const [expertToggles, setExpertToggles] = useState(Array(15).fill(false));\r\n  const [prompt, setPrompt] = useState(\"\");\r\n  const [isListening, setIsListening] = useState(false);\r\n  const [volume, setVolume] = useState(50); // Volume state\r\n\r\n  // Check if the browser supports speech recognition\r\n  const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n  const recognition = SpeechRecognition ? new SpeechRecognition() : null;\r\n  const [transcript, setTranscript] = useState(\"\");\r\n  const [error, setError] = useState(null);\r\n\r\n  const [conversationHistory, setConversationHistory] = useState([]);\r\nconst [isLoggedIn, setIsLoggedIn] = useState(false); // Assume initially logged out\r\n\r\nuseEffect(() => {\r\n  const fetchConversations = async () => {\r\n    try {\r\n      const response = await axios.get('https://localhost:8000/api/get_conversations/', { withCredentials: true });\r\n      setConversationHistory(response.data);\r\n      setIsLoggedIn(true); // Set logged-in state based on successful fetch\r\n    } catch (error) {\r\n      console.error('Error fetching conversation history:', error);\r\n      setIsLoggedIn(false); // If error, assume not logged in\r\n    }\r\n  };\r\n\r\n  fetchConversations();\r\n}, []);\r\n\r\n\r\n  if (recognition) {\r\n    recognition.continuous = false;\r\n    recognition.interimResults = false;\r\n    recognition.lang = 'en-US';\r\n\r\n    recognition.onresult = (event) => {\r\n      const transcript = event.results[0][0].transcript;\r\n      setPrompt(transcript);  // Update the entry bar with the transcribed text\r\n      console.log(\"Transcribed Text:\", transcript);  // Log transcription to browser console\r\n    };\r\n\r\n    recognition.onerror = (event) => {\r\n      console.error(\"Speech recognition error:\", event.error);  // Error handling in console\r\n      setIsListening(false);  // Reset listening state\r\n    };\r\n\r\n    recognition.onend = () => {\r\n      console.log(\"Speech recognition ended.\");  // Log end of recognition to browser console\r\n      setIsListening(false);  // Ensure the recording state is reset\r\n    };\r\n  }\r\n\r\n  // Start listening for speech\r\n  const handleStartListening = () => {\r\n    if (recognition && !isListening) {\r\n      setPrompt(\"\");  // Clear any previous text in entry bar\r\n      setIsListening(true);\r\n      console.log(\"Starting Speech Recognition\");  // Log to browser console\r\n      recognition.start();\r\n    }\r\n  };\r\n\r\n  // Stop listening for speech\r\n  const handleStopListening = () => {\r\n    if (recognition && isListening) {\r\n      console.log(\"Stopping Speech Recognition\");  // Log to browser console\r\n      recognition.stop();\r\n      setIsListening(false);  // Reset state so user can restart recording\r\n    }\r\n  };\r\n\r\n  const handlePromptSubmit = () => {\r\n    const newMessage = { text: prompt, isUser: true };\r\n    setMessages([...messages, newMessage]);\r\n    handleSendMessage(prompt);\r\n    setPrompt(\"\");\r\n  };\r\n\r\n  const openPopup = (setting) => {\r\n    setTTSEnabled(false);\r\n    setSpeechRecognitionOpen(false);\r\n    setLLMSelectionOpen(false);\r\n    setUpdateExpertsOpen(false);\r\n\r\n    if (setting === \"TTS\") setTTSEnabled(true);\r\n    if (setting === \"SpeechRecognition\") setSpeechRecognitionOpen(true);\r\n    if (setting === \"LLMSelection\") setLLMSelectionOpen(true);\r\n    if (setting === \"UpdateExperts\") setUpdateExpertsOpen(true);\r\n  };\r\n\r\n  // Function to toggle TTS setting\r\n  const toggleTTS = () => {\r\n    setTTSEnabled(!isTTSEnabled);\r\n    console.log(\"TTS Enabled:\", !isTTSEnabled); // Log for confirmation\r\n  };\r\n\r\n  const toggleExpertPopup = () => {\r\n    setExpertPopupOpen(!isExpertPopupOpen);\r\n  };\r\n\r\n  const updateExpertName = (index, newName) => {\r\n    const updatedExperts = [...experts];\r\n    updatedExperts[index] = newName;\r\n    setExperts(updatedExperts);\r\n  };\r\n\r\n  // Function to handle expert selection in the AI Image popup\r\n  const handleExpertSelection = (expert) => {\r\n    setSelectedExperts((prevExperts) => {\r\n        const updatedExperts = prevExperts.includes(expert)\r\n            ? prevExperts.filter((e) => e !== expert)\r\n            : [...prevExperts, expert];\r\n        console.log(\"Updated selectedExperts:\", updatedExperts);  // Log after update\r\n        return updatedExperts;\r\n    });\r\n  };\r\n\r\n  const handleLLMSelection = (llm) => {\r\n    setCurrentLLM(llm);\r\n    console.log(\"Updated currentLLM:\", llm);  // Log after update\r\n  };\r\n\r\n  const handleEditExpertClick = (index) => {\r\n    setCurrentExpertEdit(index);\r\n    setNewExpertName(experts[index]);\r\n    setShowEditPopup(true);\r\n  };\r\n  \r\n  const handleSaveExpertName = () => {\r\n    const updatedExperts = [...experts];\r\n    updatedExperts[currentExpertEdit] = newExpertName;\r\n    setExperts(updatedExperts);\r\n    setShowEditPopup(false);\r\n  };\r\n\r\n  function getCsrfToken() {\r\n    const name = 'csrftoken';\r\n    const cookies = document.cookie.split(';');\r\n    for (let cookie of cookies) {\r\n      cookie = cookie.trim();\r\n      if (cookie.startsWith(name + '=')) {\r\n        return cookie.substring(name.length + 1);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  const handleRestoreConversation = (conversationText) => {\r\n    // Assuming conversationText is newline-delimited for each message\r\n    const restoredMessages = conversationText.split('\\n').map((text, idx) => ({\r\n      text,\r\n      isUser: idx % 2 === 0, // Toggle between user and AI messages for simplicity\r\n    }));\r\n    setMessages(restoredMessages);\r\n  };\r\n  \r\n\r\n  const handleSendMessage = async (message) => {\r\n    try {\r\n      const response = await axios.post('https://localhost:8000/api/analyze_text/', {\r\n        text: message,\r\n        selected_experts: selectedExperts,\r\n        selected_option: currentLLM,\r\n      }, {\r\n        headers: { 'X-CSRFToken': getCsrfToken() },\r\n        withCredentials: true,\r\n      });\r\n  \r\n      const aiText = response.data.output || \"No response from AI\";\r\n      const aiResponse = { text: aiText, isUser: false };\r\n      setMessages((prevMessages) => [...prevMessages, aiResponse]);\r\n  \r\n      if (isLoggedIn) {\r\n        const fullConversation = [...messages, { text: message, isUser: true }, aiResponse]\r\n          .map(msg => msg.text).join('\\n');\r\n        \r\n        await axios.post('https://localhost:8000/api/save_conversation/', { conversation_text: fullConversation }, {\r\n          headers: { 'X-CSRFToken': getCsrfToken() },\r\n          withCredentials: true,\r\n        });\r\n      }\r\n  \r\n      if (isTTSEnabled) {\r\n        speakText(aiText, volume / 100);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending message to backend:', error);\r\n    }\r\n  };\r\n\r\n  // Ensure `speakText` uses the specified volume\r\n  const speakText = (text, volumeLevel = 0.5) => {\r\n    if ('speechSynthesis' in window) {\r\n      const utterance = new SpeechSynthesisUtterance(text);\r\n      utterance.volume = volumeLevel;  // Volume adjusted here\r\n      window.speechSynthesis.speak(utterance);\r\n    } else {\r\n      console.warn(\"TTS not supported in this browser\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"my-ui-container\">\r\n      <div className=\"ai-container\">\r\n        <button className=\"ai-image\" onClick={toggleExpertPopup}>\r\n          <img src={aiImage} alt=\"AI Expert\" />\r\n        </button>\r\n      </div>\r\n\r\n      {/* AI Expert Popup with Toggle Indicator */}\r\n      {isExpertPopupOpen && (\r\n        <div className=\"expert-popup\">\r\n          <h4>Available Experts</h4>\r\n          <div className=\"expert-grid\">\r\n            {experts.map((expert, index) => (\r\n              <button\r\n                key={index}\r\n                onClick={() => handleExpertSelection(expert)}\r\n                className={`expert-button ${selectedExperts.includes(expert) ? 'selected' : ''}`}\r\n              >\r\n                {expert}\r\n              </button>\r\n            ))}\r\n          </div>\r\n          <button onClick={toggleExpertPopup} className=\"close-popup-button\">Close</button>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"console-container\">\r\n      <Console\r\n        experts={experts}\r\n        conversationHistory={conversationHistory}\r\n        handleRestoreConversation={handleRestoreConversation}\r\n        handleEditExpertClick={handleEditExpertClick}\r\n        volume={volume}\r\n        setVolume={setVolume}\r\n        handleStartListening={handleStartListening}\r\n        handleStopListening={handleStopListening}\r\n        isListening={isListening} // Control the button label and behavior\r\n        handleLLMSelection={handleLLMSelection}  // Pass handleLLMSelection to Console\r\n        currentLLM={currentLLM}\r\n        toggleTTS={toggleTTS}\r\n        isTTSEnabled={isTTSEnabled}\r\n      />\r\n      </div>\r\n\r\n      <div className=\"user-container\">\r\n        <button className=\"user-image\">\r\n          <img src={userImage} alt=\"User Icon\" />\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"conversation-container\">\r\n        <ConversationWindow messages={messages} />\r\n      </div>\r\n\r\n      <div className=\"entry-box-container\">\r\n        <InputSection\r\n          prompt={prompt} // Pass the transcribed prompt\r\n          setPrompt={setPrompt}\r\n          onPromptSubmit={(prompt) => {\r\n            const newMessage = { text: prompt, isUser: true };\r\n            setMessages([...messages, newMessage]);\r\n            handleSendMessage(prompt);\r\n          }}\r\n          onFileUpload={(file) => console.log('File uploaded:', file.name)}\r\n          onCopyConversation={() => navigator.clipboard.writeText(messages.map(m => m.text).join('\\n'))}\r\n        />\r\n      </div>\r\n\r\n      {/* Expert Edit Popup */}\r\n      {showEditPopup && (\r\n        <div className=\"overlay\">\r\n          <div className=\"edit-popup\">\r\n            <h4>Edit Expert</h4>\r\n            <input\r\n              type=\"text\"\r\n              value={newExpertName}\r\n              onChange={(e) => setNewExpertName(e.target.value)}\r\n            />\r\n            <button onClick={handleSaveExpertName}>Save</button>\r\n            <button onClick={() => setShowEditPopup(false)}>Cancel</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Console Component\r\nfunction Console({ \r\n  experts, \r\n  handleEditExpertClick,\r\n  conversationHistory,\r\n  handleRestoreConversation, \r\n  volume, \r\n  setVolume, \r\n  handleStartListening, \r\n  handleStopListening,\r\n  isListening ,\r\n  handleLLMSelection,\r\n  currentLLM,\r\n  toggleTTS,\r\n  isTTSEnabled\r\n}) {\r\n  const [currentView, setCurrentView] = useState(\"default\");\r\n  const options = [\"Text-To-Speech\", \"Speech Recognition\", \"LLM Selection\", \"Update Experts\", \"Conversation Select\"];\r\n  const [currentOptionIndex, setCurrentOptionIndex] = useState(0);\r\n\r\n  const handleSelectOption = () => {\r\n    setCurrentView(options[currentOptionIndex]);\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setCurrentView(\"default\");\r\n  };\r\n\r\n  const handleScroll = (direction) => {\r\n    if (direction === 'up') {\r\n      setCurrentOptionIndex((prev) => (prev === 0 ? options.length - 1 : prev - 1));\r\n    } else {\r\n      setCurrentOptionIndex((prev) => (prev === options.length - 1 ? 0 : prev + 1));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"console-container\">\r\n      {currentView === \"default\" ? (\r\n        <div className=\"settings-content\">\r\n          <div className=\"console-option\">\r\n            {options[currentOptionIndex]}\r\n          </div>\r\n          <div className=\"settings-buttons\">\r\n            <button onClick={() => handleScroll('up')} className=\"up-arrow\">▲</button>\r\n            <button onClick={handleSelectOption} className=\"select-button\">Select</button>\r\n            <button onClick={() => handleScroll('down')} className=\"down-arrow\">▼</button>\r\n          </div>\r\n          {/* Volume Slider */}\r\n          <div className=\"volume-slider-container\">\r\n            <span className=\"volume-label\">TTS Volume:</span>\r\n            <input\r\n              type=\"range\"\r\n              className=\"volume-slider\"\r\n              min=\"0\"\r\n              max=\"100\"\r\n              value={volume}\r\n              onChange={(e) => setVolume(Number(e.target.value))}\r\n            />\r\n            <span className=\"volume-level\"> {volume}</span>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"settings-content\">\r\n          <h3>{currentView}</h3>\r\n          <div className=\"settings-page-content\">\r\n            {currentView === \"Text-To-Speech\" && (\r\n              <>\r\n                <p>Enable or disable Text-to-Speech:</p>\r\n                <button onClick={toggleTTS} className={`tts-button ${isTTSEnabled ? 'tts-enabled' : 'tts-disabled'}`}>\r\n                  {isTTSEnabled ? \"Disable TTS\" : \"Enable TTS\"}\r\n                </button>\r\n                {/* Volume Slider for Text-To-Speech */}\r\n                <div className=\"volume-slider-container\">\r\n                  <span className=\"volume-label\">TTS Volume:</span>\r\n                  <input\r\n                    type=\"range\"\r\n                    className=\"volume-slider\"\r\n                    min=\"0\"\r\n                    max=\"100\"\r\n                    value={volume}\r\n                    onChange={(e) => setVolume(Number(e.target.value))}\r\n                  />\r\n                  <span className=\"volume-level\"> {volume}</span>\r\n                </div>\r\n              </>\r\n            )}\r\n            {currentView === \"Speech Recognition\" && (\r\n              <>\r\n                <p>Control Speech Recognition:</p>\r\n                <button onClick={isListening ? handleStopListening : handleStartListening}>\r\n                  {isListening ? \"Stop Recording\" : \"Start Recording\"}\r\n                </button>\r\n              </>\r\n            )}\r\n            {currentView === \"LLM Selection\" && (\r\n              <>\r\n                <p>Select Language Model:</p>\r\n                <select\r\n                  className=\"llm-dropdown\"\r\n                  value={currentLLM || \"\"}\r\n                  onChange={(e) => handleLLMSelection(e.target.value)}\r\n                >\r\n                  <option value=\"\" disabled>Select an LLM</option>\r\n                  <option value=\"ChatGPT\">ChatGPT</option>\r\n                  <option value=\"Google Gemini\">Google Gemini</option>\r\n                  <option value=\"Anthropic Claude\">Anthropic Claude</option>\r\n                </select>\r\n              </>\r\n            )}\r\n            {currentView === \"Update Experts\" && (\r\n              <div className=\"expert-grid\">\r\n                {experts.map((expert, index) => (\r\n                  <button key={index} className=\"expert-button\" onClick={() => handleEditExpertClick(index)}>\r\n                    {expert}\r\n                  </button>\r\n                ))}\r\n              </div>\r\n            )}\r\n            {currentView === \"Conversation Select\" && (\r\n              <>\r\n                <p>Select a conversation to review:</p>\r\n                <div className=\"conversation-history\">\r\n                  {conversationHistory.length > 0 ? (\r\n                    conversationHistory.map((conv, index) => (\r\n                      <div\r\n                        key={index}\r\n                        className=\"conversation-item\"\r\n                        onClick={() => handleRestoreConversation(conv.conversation_text)}\r\n                      >\r\n                        {`${conv.user_id}'s Conversation ${new Date(conv.timestamp).toLocaleString()}`}\r\n                      </div>\r\n                    ))\r\n                  ) : (\r\n                    <p>No conversation history available.</p>\r\n                  )}\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n          <button onClick={handleBack} className=\"back-button\">Back</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// ConversationWindow Component\r\nfunction ConversationWindow({ messages }) {\r\n  const conversationRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (conversationRef.current) {\r\n      conversationRef.current.scrollTop = conversationRef.current.scrollHeight;\r\n    }\r\n  }, [messages]);\r\n\r\n  return (\r\n    <div className=\"conversation-window\" ref={conversationRef}>\r\n      {messages.map((message, index) => (\r\n        <div key={index} className={`message-bubble ${message.isUser ? 'user-message' : 'ai-message'}`}>\r\n          {message.text && <p>{message.text}</p>}\r\n          {/* Render images if they are present in the AI response */}\r\n          {message.images && message.images.map((img, imgIndex) => (\r\n            <img\r\n              key={imgIndex}\r\n              src={img.url}\r\n              alt=\"AI response\"\r\n              className=\"ai-image-response\"\r\n              style={{ maxWidth: '100%', marginTop: '10px', borderRadius: '8px' }}\r\n            />\r\n          ))}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\n// TTS function\r\nfunction speakText(text) {\r\n  if ('speechSynthesis' in window) {\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    utterance.rate = 1; // You can adjust rate, pitch, and volume here if needed\r\n    window.speechSynthesis.speak(utterance);\r\n  } else {\r\n    console.warn(\"TTS not supported in this browser\");\r\n  }\r\n}\r\n\r\n// InputSection Component\r\nfunction InputSection({ prompt, setPrompt, onPromptSubmit, onFileUpload, onCopyConversation }) {\r\n\r\n  const handleInputChange = (e) => {\r\n    setPrompt(e.target.value);\r\n    e.target.style.height = \"auto\";\r\n    e.target.style.height = `${e.target.scrollHeight}px`;\r\n  };\r\n\r\n  const handleFileUpload = (e) => {\r\n    if (e.target.files.length > 0) {\r\n      onFileUpload(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const handleBlur = (e) => {\r\n    if (prompt === \"\") {\r\n      e.target.style.height = \"20px\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"input-section\">\r\n      <textarea\r\n        value={prompt}\r\n        onChange={handleInputChange}\r\n        onBlur={handleBlur}\r\n        className=\"prompt-input\"\r\n        placeholder=\"Type your message here...\"\r\n        rows={1}\r\n        style={{ height: \"20px\" }}\r\n      />\r\n      <button onClick={() => onPromptSubmit(prompt)}>Submit</button>\r\n      <button onClick={onCopyConversation}>Copy Conversation</button>\r\n      <button onClick={() => document.getElementById('file-upload').click()}>Upload File</button>\r\n      <input type=\"file\" id=\"file-upload\" style={{ display: 'none' }} onChange={handleFileUpload} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MultiChatXpertPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}